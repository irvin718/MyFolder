
led_move.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000019a  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000230  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000859  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007af  00000000  00000000  00000b21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b4  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001584  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bb  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000095  00000000  00000000  00001987  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001a1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	45 c0       	rjmp	.+138    	; 0xc8 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e9       	ldi	r30, 0x9A	; 154
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	1a d0       	rcall	.+52     	; 0xf8 <main>
  c4:	68 c0       	rjmp	.+208    	; 0x196 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_15>:

volatile int count = 0;
int state = 1;

ISR(TIMER0_COMP_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	count++;
  d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  da:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
  e4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	TCNT0 = 0;
  e8:	12 be       	out	0x32, r1	; 50
}
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <main>:

int main(void)
{
	DDRD = 0xff;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
  fc:	12 ba       	out	0x12, r1	; 18
	TCCR0 |= (1<<CS02) | (1<<CS01) | (1<<CS00);
  fe:	83 b7       	in	r24, 0x33	; 51
 100:	87 60       	ori	r24, 0x07	; 7
 102:	83 bf       	out	0x33, r24	; 51
	OCR0 = 128;
 104:	80 e8       	ldi	r24, 0x80	; 128
 106:	81 bf       	out	0x31, r24	; 49
	TIMSK |= (1<<OCIE0);
 108:	87 b7       	in	r24, 0x37	; 55
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	87 bf       	out	0x37, r24	; 55
	sei();
 10e:	78 94       	sei
	int i=0;
 110:	20 e0       	ldi	r18, 0x00	; 0
 112:	30 e0       	ldi	r19, 0x00	; 0
					i = 0;
				}
			}
			else if (state == 2)
			{
				PORTD = 0x80 >> i;
 114:	60 e8       	ldi	r22, 0x80	; 128
 116:	70 e0       	ldi	r23, 0x00	; 0
				i++;
				if (i == 8)
				{
					state = 1;
 118:	41 e0       	ldi	r20, 0x01	; 1
 11a:	50 e0       	ldi	r21, 0x00	; 0
			{
				PORTD = 0x01 << i;
				i++;
				if (i == 8)
				{
					state = 2;
 11c:	e2 e0       	ldi	r30, 0x02	; 2
 11e:	f0 e0       	ldi	r31, 0x00	; 0
	TIMSK |= (1<<OCIE0);
	sei();
	int i=0;
    while (1) 
    {
		if (count == 38)  // 0.3 sec
 120:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 124:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 128:	86 97       	sbiw	r24, 0x26	; 38
 12a:	d1 f7       	brne	.-12     	; 0x120 <main+0x28>
		{
			count = 0;
 12c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 130:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			if (state == 1)
 134:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 138:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	91 05       	cpc	r25, r1
 140:	a1 f4       	brne	.+40     	; 0x16a <main+0x72>
			{
				PORTD = 0x01 << i;
 142:	ca 01       	movw	r24, r20
 144:	02 2e       	mov	r0, r18
 146:	02 c0       	rjmp	.+4      	; 0x14c <main+0x54>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <main+0x50>
 150:	82 bb       	out	0x12, r24	; 18
				i++;
 152:	2f 5f       	subi	r18, 0xFF	; 255
 154:	3f 4f       	sbci	r19, 0xFF	; 255
				if (i == 8)
 156:	28 30       	cpi	r18, 0x08	; 8
 158:	31 05       	cpc	r19, r1
 15a:	11 f7       	brne	.-60     	; 0x120 <main+0x28>
				{
					state = 2;
 15c:	f0 93 01 01 	sts	0x0101, r31	; 0x800101 <__data_start+0x1>
 160:	e0 93 00 01 	sts	0x0100, r30	; 0x800100 <__data_start>
					i = 0;
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	db cf       	rjmp	.-74     	; 0x120 <main+0x28>
				}
			}
			else if (state == 2)
 16a:	02 97       	sbiw	r24, 0x02	; 2
 16c:	c9 f6       	brne	.-78     	; 0x120 <main+0x28>
			{
				PORTD = 0x80 >> i;
 16e:	cb 01       	movw	r24, r22
 170:	02 2e       	mov	r0, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <main+0x80>
 174:	95 95       	asr	r25
 176:	87 95       	ror	r24
 178:	0a 94       	dec	r0
 17a:	e2 f7       	brpl	.-8      	; 0x174 <main+0x7c>
 17c:	82 bb       	out	0x12, r24	; 18
				i++;
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	3f 4f       	sbci	r19, 0xFF	; 255
				if (i == 8)
 182:	28 30       	cpi	r18, 0x08	; 8
 184:	31 05       	cpc	r19, r1
 186:	61 f6       	brne	.-104    	; 0x120 <main+0x28>
				{
					state = 1;
 188:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__data_start+0x1>
 18c:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
					i = 0;
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	c5 cf       	rjmp	.-118    	; 0x120 <main+0x28>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
