
led_int.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000926  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084c  00000000  00000000  00000bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000327  00000000  00000000  00001406  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001730  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041f  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b0  00000000  00000000  00001bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001c6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	54 c0       	rjmp	.+168    	; 0xae <__vector_1>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	3c d0       	rcall	.+120    	; 0x122 <main>
  aa:	63 c0       	rjmp	.+198    	; 0x172 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_1>:
#include <util/delay.h>

volatile int state = 0;

ISR(INT0_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
	if (state == 1)
  be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	39 f4       	brne	.+14     	; 0xd8 <__vector_1+0x2a>
	{
		state = -1;
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	9f ef       	ldi	r25, 0xFF	; 255
  ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  d6:	0c c0       	rjmp	.+24     	; 0xf0 <__vector_1+0x42>
	}
	else if( state == -1)
  d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	31 f4       	brne	.+12     	; 0xf0 <__vector_1+0x42>
	{
		state = 1;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	2f 91       	pop	r18
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <INIT_PORT>:

void INIT_PORT(void)
{
	DDRB = 0xff;
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
 104:	18 ba       	out	0x18, r1	; 24
	
	DDRD = 0x00;
 106:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x01;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	82 bb       	out	0x12, r24	; 18
 10c:	08 95       	ret

0000010e <INIT_INT0>:
}

void INIT_INT0(void)
{
	EIMSK |= ( 1 << INT1 | 1 << INT0);
 10e:	89 b7       	in	r24, 0x39	; 57
 110:	83 60       	ori	r24, 0x03	; 3
 112:	89 bf       	out	0x39, r24	; 57
	EICRA |= ( 1 << ISC00) | (1 << ISC01);
 114:	ea e6       	ldi	r30, 0x6A	; 106
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	83 60       	ori	r24, 0x03	; 3
 11c:	80 83       	st	Z, r24
	sei();
 11e:	78 94       	sei
 120:	08 95       	ret

00000122 <main>:

int main(void)
{
	int index;
	
	INIT_PORT();
 122:	ee df       	rcall	.-36     	; 0x100 <INIT_PORT>
	INIT_INT0();
 124:	f4 df       	rcall	.-24     	; 0x10e <INIT_INT0>
 126:	80 e0       	ldi	r24, 0x00	; 0
	
	index = 0;
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	41 e0       	ldi	r20, 0x01	; 1
    while (1) 
    {
		index += state;
		if(index  >= 8) index = 0;
		if(index < 0) index = 7;
		uint8_t pattern = (1 << index);
 12c:	50 e0       	ldi	r21, 0x00	; 0
 12e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
	
	index = 0;
    /* Replace with your application code */
    while (1) 
    {
		index += state;
 132:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 136:	82 0f       	add	r24, r18
 138:	93 1f       	adc	r25, r19
 13a:	88 30       	cpi	r24, 0x08	; 8
		if(index  >= 8) index = 0;
 13c:	91 05       	cpc	r25, r1
 13e:	2c f4       	brge	.+10     	; 0x14a <main+0x28>
 140:	99 23       	and	r25, r25
		if(index < 0) index = 7;
 142:	2c f4       	brge	.+10     	; 0x14e <main+0x2c>
 144:	87 e0       	ldi	r24, 0x07	; 7
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <main+0x2c>
 14a:	80 e0       	ldi	r24, 0x00	; 0
	index = 0;
    /* Replace with your application code */
    while (1) 
    {
		index += state;
		if(index  >= 8) index = 0;
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	9a 01       	movw	r18, r20
		if(index < 0) index = 7;
		uint8_t pattern = (1 << index);
 150:	08 2e       	mov	r0, r24
 152:	02 c0       	rjmp	.+4      	; 0x158 <main+0x36>
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	0a 94       	dec	r0
 15a:	e2 f7       	brpl	.-8      	; 0x154 <main+0x32>
 15c:	28 bb       	out	0x18, r18	; 24
		PORTB = pattern;
 15e:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	39 e6       	ldi	r19, 0x69	; 105
 162:	68 e1       	ldi	r22, 0x18	; 24
 164:	21 50       	subi	r18, 0x01	; 1
 166:	30 40       	sbci	r19, 0x00	; 0
 168:	60 40       	sbci	r22, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0x42>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x4c>
 16e:	00 00       	nop
 170:	de cf       	rjmp	.-68     	; 0x12e <main+0xc>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
