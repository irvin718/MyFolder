
COMP_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000264  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000087e  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000079e  00000000  00000000  00000b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032a  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001654  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e6  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e8  00000000  00000000  00001ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001bba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4c c0       	rjmp	.+152    	; 0xae <__vector_5>
  16:	00 00       	nop
  18:	5b c0       	rjmp	.+182    	; 0xd0 <__vector_6>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__vector_15>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	66 d0       	rcall	.+204    	; 0x176 <main>
  aa:	a0 c0       	rjmp	.+320    	; 0x1ec <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_5>:

volatile int count = 0;
volatile int state = 0;

ISR(INT4_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
	OCR0= 255;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	81 bf       	out	0x31, r24	; 49
	OCR2 = 255;
  be:	83 bd       	out	0x23, r24	; 35
	OCR1A = 0;
  c0:	1b bc       	out	0x2b, r1	; 43
  c2:	1a bc       	out	0x2a, r1	; 42
	
}
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <__vector_6>:

ISR(INT5_vect)
{
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
	OCR0 = 0;
  de:	11 be       	out	0x31, r1	; 49
	OCR2 = 0;
  e0:	13 bc       	out	0x23, r1	; 35
	OCR1A = 255;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	9b bd       	out	0x2b, r25	; 43
  e8:	8a bd       	out	0x2a, r24	; 42
	
}
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <__vector_15>:

ISR(TIMER0_COMP_vect)
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	2f 93       	push	r18
 104:	3f 93       	push	r19
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
	count++;
 10a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 10e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <count+0x1>
 118:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count>
	TCNT0 = 0;
 11c:	12 be       	out	0x32, r1	; 50
	if(count == 64)
 11e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 122:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 126:	80 34       	cpi	r24, 0x40	; 64
 128:	91 05       	cpc	r25, r1
 12a:	e1 f4       	brne	.+56     	; 0x164 <__vector_15+0x6c>
	{
		count = 0;
 12c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <count+0x1>
 130:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <count>
		state = !state;
 134:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 138:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	23 2b       	or	r18, r19
 142:	11 f0       	breq	.+4      	; 0x148 <__vector_15+0x50>
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 14c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		if(state) PORTD = 0x01;
 150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 154:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 158:	89 2b       	or	r24, r25
 15a:	19 f0       	breq	.+6      	; 0x162 <__vector_15+0x6a>
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	82 bb       	out	0x12, r24	; 18
 160:	01 c0       	rjmp	.+2      	; 0x164 <__vector_15+0x6c>
		else PORTD = 0x00;
 162:	12 ba       	out	0x12, r1	; 18
	}
}
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	3f 91       	pop	r19
 16a:	2f 91       	pop	r18
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <main>:

int main(void)
{
	DDRD = 0x01;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
 17a:	12 ba       	out	0x12, r1	; 18
	DDRB = 0xff;
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	87 bb       	out	0x17, r24	; 23
	DDRE = 0x00;
 180:	12 b8       	out	0x02, r1	; 2
	PORTE = 0x30;
 182:	80 e3       	ldi	r24, 0x30	; 48
 184:	83 b9       	out	0x03, r24	; 3
	
	TCCR0 |= (1<< CS02);
 186:	83 b7       	in	r24, 0x33	; 51
 188:	84 60       	ori	r24, 0x04	; 4
 18a:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<WGM01) | (1<<WGM00);
 18c:	83 b7       	in	r24, 0x33	; 51
 18e:	88 64       	ori	r24, 0x48	; 72
 190:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<COM01);
 192:	83 b7       	in	r24, 0x33	; 51
 194:	80 62       	ori	r24, 0x20	; 32
 196:	83 bf       	out	0x33, r24	; 51
	
	TCCR2 |= (1<< CS01) | (1 <<CS00);
 198:	85 b5       	in	r24, 0x25	; 37
 19a:	83 60       	ori	r24, 0x03	; 3
 19c:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<< WGM20) | (1<< WGM21);
 19e:	85 b5       	in	r24, 0x25	; 37
 1a0:	88 64       	ori	r24, 0x48	; 72
 1a2:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<< COM21) | (1<< COM20);
 1a4:	85 b5       	in	r24, 0x25	; 37
 1a6:	80 63       	ori	r24, 0x30	; 48
 1a8:	85 bd       	out	0x25, r24	; 37
	
	TCCR1A |= (1<<WGM10);
 1aa:	8f b5       	in	r24, 0x2f	; 47
 1ac:	81 60       	ori	r24, 0x01	; 1
 1ae:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1<<COM1A1);
 1b0:	8f b5       	in	r24, 0x2f	; 47
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1<<COM1B1) | (1<<COM1B0);
 1b6:	8f b5       	in	r24, 0x2f	; 47
 1b8:	80 63       	ori	r24, 0x30	; 48
 1ba:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS12);
 1bc:	8e b5       	in	r24, 0x2e	; 46
 1be:	84 60       	ori	r24, 0x04	; 4
 1c0:	8e bd       	out	0x2e, r24	; 46
	
	
	EIMSK |= (1<< INT4);
 1c2:	89 b7       	in	r24, 0x39	; 57
 1c4:	80 61       	ori	r24, 0x10	; 16
 1c6:	89 bf       	out	0x39, r24	; 57
	EIMSK |= (1<< INT5); 
 1c8:	89 b7       	in	r24, 0x39	; 57
 1ca:	80 62       	ori	r24, 0x20	; 32
 1cc:	89 bf       	out	0x39, r24	; 57
	EICRB |= (1<< ISC41);
 1ce:	8a b7       	in	r24, 0x3a	; 58
 1d0:	82 60       	ori	r24, 0x02	; 2
 1d2:	8a bf       	out	0x3a, r24	; 58
	EICRB |= (1<< ISC51);
 1d4:	8a b7       	in	r24, 0x3a	; 58
 1d6:	88 60       	ori	r24, 0x08	; 8
 1d8:	8a bf       	out	0x3a, r24	; 58
	
	
	OCR0 = 127;
 1da:	8f e7       	ldi	r24, 0x7F	; 127
 1dc:	81 bf       	out	0x31, r24	; 49
	OCR2 = 127;
 1de:	83 bd       	out	0x23, r24	; 35
	
	OCR1A = 500;
 1e0:	84 ef       	ldi	r24, 0xF4	; 244
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	9b bd       	out	0x2b, r25	; 43
 1e6:	8a bd       	out	0x2a, r24	; 42
	
	//TIMSK |= (1<<OCIE0);
	sei();
 1e8:	78 94       	sei
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <main+0x74>

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
