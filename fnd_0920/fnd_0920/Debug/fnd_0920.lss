
fnd_0920.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000b46  00000bda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080011c  0080011c  00000bf6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bf6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014bc  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d60  00000000  00000000  00002298  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ab7  00000000  00000000  00002ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  00003ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061f  00000000  00000000  00003dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a22  00000000  00000000  000043df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004e01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	61 c1       	rjmp	.+706    	; 0x304 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e4       	ldi	r30, 0x46	; 70
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 31       	cpi	r26, 0x1C	; 28
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e1       	ldi	r26, 0x1C	; 28
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 31       	cpi	r26, 0x1F	; 31
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ec d1       	rcall	.+984    	; 0x49c <main>
  c4:	3e c5       	rjmp	.+2684   	; 0xb42 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <IOPortInit>:
	TimerInterruptInit();
}

void IOPortInit(void)
{
	FND_DATA_DDR = 0xff;   // FND Data Port
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	FND_CONTROL_DDR |= 0xf0;   // FND Control Port
  ce:	84 b3       	in	r24, 0x14	; 20
  d0:	80 6f       	ori	r24, 0xF0	; 240
  d2:	84 bb       	out	0x14, r24	; 20
  d4:	08 95       	ret

000000d6 <TimerInterruptInit>:
}

void TimerInterruptInit(void)
{
	TCCR0 |= (1<<CS02) | (1<<CS01) | (0<<CS00);
  d6:	83 b7       	in	r24, 0x33	; 51
  d8:	86 60       	ori	r24, 0x06	; 6
  da:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);
  dc:	87 b7       	in	r24, 0x37	; 55
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	87 bf       	out	0x37, r24	; 55
  e2:	08 95       	ret

000000e4 <FND_init>:
#include "FND.h"
#include "ShiftRegister.h"

void FND_init(void)
{
	ShiftRegisterInit();
  e4:	16 d2       	rcall	.+1068   	; 0x512 <ShiftRegisterInit>
	IOPortInit();
  e6:	f0 df       	rcall	.-32     	; 0xc8 <IOPortInit>
	TimerInterruptInit();
  e8:	f6 cf       	rjmp	.-20     	; 0xd6 <TimerInterruptInit>
  ea:	08 95       	ret

000000ec <displayFND>:
  ec:	cf 93       	push	r28
	TCCR0 |= (1<<CS02) | (1<<CS01) | (0<<CS00);
	TIMSK |= (1<<TOIE0);
}

void displayFND(uint8_t position, uint8_t number)
{
  ee:	df 93       	push	r29
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	2e 97       	sbiw	r28, 0x0e	; 14
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
	                    // 0   1     2     3     4     5     6     7     8     9
	uint8_t numFont[] =	{0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x67};
 100:	9a e0       	ldi	r25, 0x0A	; 10
 102:	e0 e0       	ldi	r30, 0x00	; 0
 104:	f1 e0       	ldi	r31, 0x01	; 1
 106:	de 01       	movw	r26, r28
 108:	11 96       	adiw	r26, 0x01	; 1
 10a:	01 90       	ld	r0, Z+
 10c:	0d 92       	st	X+, r0
 10e:	9a 95       	dec	r25
 110:	e1 f7       	brne	.-8      	; 0x10a <displayFND+0x1e>
	          // FND 위치  1000,  100,   10,    1
	uint8_t fndselect[] = {0x80, 0x40, 0x20, 0x10};
 112:	90 e8       	ldi	r25, 0x80	; 128
 114:	9b 87       	std	Y+11, r25	; 0x0b
 116:	90 e4       	ldi	r25, 0x40	; 64
 118:	9c 87       	std	Y+12, r25	; 0x0c
 11a:	90 e2       	ldi	r25, 0x20	; 32
 11c:	9d 87       	std	Y+13, r25	; 0x0d
 11e:	90 e1       	ldi	r25, 0x10	; 16
 120:	9e 87       	std	Y+14, r25	; 0x0e
	
	FND_CONTROL_PORT = FND_CONTROL_PORT|0xf0;
 122:	95 b3       	in	r25, 0x15	; 21
 124:	90 6f       	ori	r25, 0xF0	; 240
 126:	95 bb       	out	0x15, r25	; 21
	FND_CONTROL_PORT &= ~fndselect[position];
 128:	95 b3       	in	r25, 0x15	; 21
 12a:	fe 01       	movw	r30, r28
 12c:	e8 0f       	add	r30, r24
 12e:	f1 1d       	adc	r31, r1
 130:	83 85       	ldd	r24, Z+11	; 0x0b
 132:	80 95       	com	r24
 134:	98 23       	and	r25, r24
 136:	95 bb       	out	0x15, r25	; 21
	//FND_DATA_PORT = numFont[number];
	ShiftRegisterDataWrite(numFont[number]);
 138:	e1 e0       	ldi	r30, 0x01	; 1
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	ec 0f       	add	r30, r28
 13e:	fd 1f       	adc	r31, r29
 140:	e6 0f       	add	r30, r22
 142:	f1 1d       	adc	r31, r1
 144:	80 81       	ld	r24, Z
 146:	f4 d1       	rcall	.+1000   	; 0x530 <ShiftRegisterDataWrite>
}
 148:	2e 96       	adiw	r28, 0x0e	; 14
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	de bf       	out	0x3e, r29	; 62
 150:	0f be       	out	0x3f, r0	; 63
 152:	cd bf       	out	0x3d, r28	; 61
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <I2C_init>:
 */ 
#include <avr/io.h>
#include "I2C.h"

void I2C_init(unsigned int baud){
	TWBR = baud;
 15a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 15e:	08 95       	ret

00000160 <I2C_start>:
}

void I2C_start(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 160:	84 ea       	ldi	r24, 0xA4	; 164
 162:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));  // 시작 완료 대기
 166:	e4 e7       	ldi	r30, 0x74	; 116
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	88 23       	and	r24, r24
 16e:	ec f7       	brge	.-6      	; 0x16a <I2C_start+0xa>
}
 170:	08 95       	ret

00000172 <I2C_transmit>:

void I2C_transmit(uint8_t data)
{
	TWDR = data;
 172:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);
 176:	84 e8       	ldi	r24, 0x84	; 132
 178:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));
 17c:	e4 e7       	ldi	r30, 0x74	; 116
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	88 23       	and	r24, r24
 184:	ec f7       	brge	.-6      	; 0x180 <I2C_transmit+0xe>
}
 186:	08 95       	ret

00000188 <I2C_write_byte>:

void I2C_write_byte(uint8_t address, uint8_t data)
{
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	d8 2f       	mov	r29, r24
 18e:	c6 2f       	mov	r28, r22
	I2C_start();
 190:	e7 df       	rcall	.-50     	; 0x160 <I2C_start>
	I2C_transmit(address);
 192:	8d 2f       	mov	r24, r29
 194:	ee df       	rcall	.-36     	; 0x172 <I2C_transmit>
	I2C_transmit(data);
 196:	8c 2f       	mov	r24, r28
 198:	ec df       	rcall	.-40     	; 0x172 <I2C_transmit>
 19a:	84 e9       	ldi	r24, 0x94	; 148
	I2C_stop();
}

void I2C_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 19c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 1a0:	df 91       	pop	r29
{
	I2C_start();
	I2C_transmit(address);
	I2C_transmit(data);
	I2C_stop();
}
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <I2C_LCD_write_data>:
 1a6:	ef 92       	push	r14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	ff 92       	push	r15
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	00 d0       	rcall	.+0      	; 0x1b4 <I2C_LCD_write_data+0xe>
 1b4:	00 d0       	rcall	.+0      	; 0x1b6 <I2C_LCD_write_data+0x10>
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
 1ba:	28 2f       	mov	r18, r24
 1bc:	20 7f       	andi	r18, 0xF0	; 240
 1be:	30 e1       	ldi	r19, 0x10	; 16
 1c0:	83 9f       	mul	r24, r19
 1c2:	c0 01       	movw	r24, r0
 1c4:	11 24       	eor	r1, r1
 1c6:	92 2f       	mov	r25, r18
 1c8:	9d 60       	ori	r25, 0x0D	; 13
 1ca:	99 83       	std	Y+1, r25	; 0x01
 1cc:	29 60       	ori	r18, 0x09	; 9
 1ce:	2a 83       	std	Y+2, r18	; 0x02
 1d0:	98 2f       	mov	r25, r24
 1d2:	9d 60       	ori	r25, 0x0D	; 13
 1d4:	9b 83       	std	Y+3, r25	; 0x03
 1d6:	89 60       	ori	r24, 0x09	; 9
 1d8:	8c 83       	std	Y+4, r24	; 0x04
 1da:	8e 01       	movw	r16, r28
 1dc:	0f 5f       	subi	r16, 0xFF	; 255
 1de:	1f 4f       	sbci	r17, 0xFF	; 255
 1e0:	7e 01       	movw	r14, r28
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	e8 0e       	add	r14, r24
 1e6:	f1 1c       	adc	r15, r1
 1e8:	f8 01       	movw	r30, r16
 1ea:	61 91       	ld	r22, Z+
 1ec:	8f 01       	movw	r16, r30
 1ee:	8e e4       	ldi	r24, 0x4E	; 78
 1f0:	cb df       	rcall	.-106    	; 0x188 <I2C_write_byte>
 1f2:	0e 15       	cp	r16, r14
 1f4:	1f 05       	cpc	r17, r15
 1f6:	c1 f7       	brne	.-16     	; 0x1e8 <I2C_LCD_write_data+0x42>
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	1f 91       	pop	r17
 206:	0f 91       	pop	r16
 208:	ff 90       	pop	r15
 20a:	ef 90       	pop	r14
 20c:	08 95       	ret

0000020e <I2C_LCD_write_command>:
 20e:	ef 92       	push	r14
 210:	ff 92       	push	r15
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	00 d0       	rcall	.+0      	; 0x21c <I2C_LCD_write_command+0xe>
 21c:	00 d0       	rcall	.+0      	; 0x21e <I2C_LCD_write_command+0x10>
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	28 2f       	mov	r18, r24
 224:	20 7f       	andi	r18, 0xF0	; 240
 226:	30 e1       	ldi	r19, 0x10	; 16
 228:	83 9f       	mul	r24, r19
 22a:	c0 01       	movw	r24, r0
 22c:	11 24       	eor	r1, r1
 22e:	92 2f       	mov	r25, r18
 230:	9c 60       	ori	r25, 0x0C	; 12
 232:	99 83       	std	Y+1, r25	; 0x01
 234:	28 60       	ori	r18, 0x08	; 8
 236:	2a 83       	std	Y+2, r18	; 0x02
 238:	98 2f       	mov	r25, r24
 23a:	9c 60       	ori	r25, 0x0C	; 12
 23c:	9b 83       	std	Y+3, r25	; 0x03
 23e:	88 60       	ori	r24, 0x08	; 8
 240:	8c 83       	std	Y+4, r24	; 0x04
 242:	8e 01       	movw	r16, r28
 244:	0f 5f       	subi	r16, 0xFF	; 255
 246:	1f 4f       	sbci	r17, 0xFF	; 255
 248:	7e 01       	movw	r14, r28
 24a:	85 e0       	ldi	r24, 0x05	; 5
 24c:	e8 0e       	add	r14, r24
 24e:	f1 1c       	adc	r15, r1
 250:	f8 01       	movw	r30, r16
 252:	61 91       	ld	r22, Z+
 254:	8f 01       	movw	r16, r30
 256:	8e e4       	ldi	r24, 0x4E	; 78
 258:	97 df       	rcall	.-210    	; 0x188 <I2C_write_byte>
 25a:	0e 15       	cp	r16, r14
 25c:	1f 05       	cpc	r17, r15
 25e:	c1 f7       	brne	.-16     	; 0x250 <I2C_LCD_write_command+0x42>
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	1f 91       	pop	r17
 26e:	0f 91       	pop	r16
 270:	ff 90       	pop	r15
 272:	ef 90       	pop	r14
 274:	08 95       	ret

00000276 <I2C_LCD_init>:
	_delay_ms(2);
}

void I2C_LCD_init(void)
{
	I2C_init(10000);
 276:	80 e1       	ldi	r24, 0x10	; 16
 278:	97 e2       	ldi	r25, 0x27	; 39
 27a:	6f df       	rcall	.-290    	; 0x15a <I2C_init>
 27c:	2f ef       	ldi	r18, 0xFF	; 255
 27e:	80 e7       	ldi	r24, 0x70	; 112
 280:	92 e0       	ldi	r25, 0x02	; 2
 282:	21 50       	subi	r18, 0x01	; 1
 284:	80 40       	sbci	r24, 0x00	; 0
 286:	90 40       	sbci	r25, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <I2C_LCD_init+0xc>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <I2C_LCD_init+0x16>
 28c:	00 00       	nop
	_delay_ms(50);
	//Initialization of HD44780-based LCD (4-bit HW)
	I2C_LCD_write_command(0x33);
 28e:	83 e3       	ldi	r24, 0x33	; 51
 290:	be df       	rcall	.-132    	; 0x20e <I2C_LCD_write_command>
	I2C_LCD_write_command(0x32);
 292:	82 e3       	ldi	r24, 0x32	; 50
 294:	bc df       	rcall	.-136    	; 0x20e <I2C_LCD_write_command>
	I2C_LCD_write_command(0x28);   //Function Set 4-bit mode
 296:	88 e2       	ldi	r24, 0x28	; 40
 298:	ba df       	rcall	.-140    	; 0x20e <I2C_LCD_write_command>
	I2C_LCD_write_command(0x0c);   //Display On/Off Control
 29a:	8c e0       	ldi	r24, 0x0C	; 12
 29c:	b8 df       	rcall	.-144    	; 0x20e <I2C_LCD_write_command>
	I2C_LCD_write_command(0x06);   //Entry mode set
 29e:	86 e0       	ldi	r24, 0x06	; 6
 2a0:	b6 df       	rcall	.-148    	; 0x20e <I2C_LCD_write_command>
 2a2:	81 e0       	ldi	r24, 0x01	; 1
	I2C_LCD_write_command(0x01);   //Clear Display
 2a4:	b4 df       	rcall	.-152    	; 0x20e <I2C_LCD_write_command>
 2a6:	8f e3       	ldi	r24, 0x3F	; 63
 2a8:	9c e9       	ldi	r25, 0x9C	; 156
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <I2C_LCD_init+0x34>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <I2C_LCD_init+0x3a>
 2b0:	00 00       	nop
 2b2:	08 95       	ret

000002b4 <I2C_LCD_write_string>:
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
	//Minimum delay to wait before driving LCD module
	_delay_ms(10);
}

void I2C_LCD_write_string(char *string)
{
 2b8:	cf 93       	push	r28
 2ba:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i=0; string[i]; i++)
 2bc:	80 81       	ld	r24, Z
 2be:	88 23       	and	r24, r24
 2c0:	51 f0       	breq	.+20     	; 0x2d6 <I2C_LCD_write_string+0x22>
 2c2:	8f 01       	movw	r16, r30
 2c4:	c0 e0       	ldi	r28, 0x00	; 0
	I2C_LCD_write_data(string[i]);
 2c6:	6f df       	rcall	.-290    	; 0x1a6 <I2C_LCD_write_data>
}

void I2C_LCD_write_string(char *string)
{
	uint8_t i;
	for(i=0; string[i]; i++)
 2c8:	cf 5f       	subi	r28, 0xFF	; 255
 2ca:	f8 01       	movw	r30, r16
 2cc:	ec 0f       	add	r30, r28
 2ce:	f1 1d       	adc	r31, r1
 2d0:	80 81       	ld	r24, Z
 2d2:	81 11       	cpse	r24, r1
 2d4:	f8 cf       	rjmp	.-16     	; 0x2c6 <I2C_LCD_write_string+0x12>
	I2C_LCD_write_data(string[i]);
}
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	08 95       	ret

000002de <I2C_LCD_goto_XY>:
	row %= 2;
	
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;
	
	I2C_LCD_write_command(command);
 2de:	81 70       	andi	r24, 0x01	; 1
 2e0:	6f 70       	andi	r22, 0x0F	; 15
 2e2:	90 e4       	ldi	r25, 0x40	; 64
 2e4:	89 9f       	mul	r24, r25
 2e6:	60 0d       	add	r22, r0
 2e8:	11 24       	eor	r1, r1
 2ea:	86 2f       	mov	r24, r22
 2ec:	80 58       	subi	r24, 0x80	; 128
 2ee:	8f cf       	rjmp	.-226    	; 0x20e <I2C_LCD_write_command>
 2f0:	08 95       	ret

000002f2 <I2C_LCD_write_string_XY>:
}

void I2C_LCD_write_string_XY(uint8_t row, uint8_t col, char *string)
{
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	ea 01       	movw	r28, r20
	I2C_LCD_goto_XY(row, col);
 2f8:	f2 df       	rcall	.-28     	; 0x2de <I2C_LCD_goto_XY>
	I2C_LCD_write_string(string);
 2fa:	ce 01       	movw	r24, r28
 2fc:	db df       	rcall	.-74     	; 0x2b4 <I2C_LCD_write_string>
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <__vector_16>:
{
	FndValue = value;
}

ISR(TIMER0_OVF_vect)
{
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	0b b6       	in	r0, 0x3b	; 59
 310:	0f 92       	push	r0
 312:	2f 93       	push	r18
 314:	3f 93       	push	r19
 316:	4f 93       	push	r20
 318:	5f 93       	push	r21
 31a:	6f 93       	push	r22
 31c:	7f 93       	push	r23
 31e:	8f 93       	push	r24
 320:	9f 93       	push	r25
 322:	af 93       	push	r26
 324:	bf 93       	push	r27
 326:	ef 93       	push	r30
 328:	ff 93       	push	r31
	if(timercounter0%4 == 0){
 32a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timercounter0>
 32e:	83 70       	andi	r24, 0x03	; 3
 330:	f9 f4       	brne	.+62     	; 0x370 <__vector_16+0x6c>
		displayFND(0, FndValue%10);  // 1???먮━
 332:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <__data_end>
 336:	50 91 1d 01 	lds	r21, 0x011D	; 0x80011d <__data_end+0x1>
 33a:	9a 01       	movw	r18, r20
 33c:	ad ec       	ldi	r26, 0xCD	; 205
 33e:	bc ec       	ldi	r27, 0xCC	; 204
 340:	16 d1       	rcall	.+556    	; 0x56e <__umulhisi3>
 342:	96 95       	lsr	r25
 344:	87 95       	ror	r24
 346:	96 95       	lsr	r25
 348:	87 95       	ror	r24
 34a:	96 95       	lsr	r25
 34c:	87 95       	ror	r24
 34e:	9c 01       	movw	r18, r24
 350:	22 0f       	add	r18, r18
 352:	33 1f       	adc	r19, r19
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	82 0f       	add	r24, r18
 362:	93 1f       	adc	r25, r19
 364:	ba 01       	movw	r22, r20
 366:	68 1b       	sub	r22, r24
 368:	79 0b       	sbc	r23, r25
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	bf de       	rcall	.-642    	; 0xec <displayFND>
 36e:	78 c0       	rjmp	.+240    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
	}
	else if(timercounter0%4 == 1){
 370:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timercounter0>
 374:	83 70       	andi	r24, 0x03	; 3
 376:	81 30       	cpi	r24, 0x01	; 1
 378:	29 f5       	brne	.+74     	; 0x3c4 <__vector_16+0xc0>
		displayFND(1, FndValue%100/10);  // 10???먮━
 37a:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <__data_end>
 37e:	50 91 1d 01 	lds	r21, 0x011D	; 0x80011d <__data_end+0x1>
 382:	9a 01       	movw	r18, r20
 384:	36 95       	lsr	r19
 386:	27 95       	ror	r18
 388:	36 95       	lsr	r19
 38a:	27 95       	ror	r18
 38c:	ab e7       	ldi	r26, 0x7B	; 123
 38e:	b4 e1       	ldi	r27, 0x14	; 20
 390:	ee d0       	rcall	.+476    	; 0x56e <__umulhisi3>
 392:	96 95       	lsr	r25
 394:	87 95       	ror	r24
 396:	64 e6       	ldi	r22, 0x64	; 100
 398:	68 9f       	mul	r22, r24
 39a:	90 01       	movw	r18, r0
 39c:	69 9f       	mul	r22, r25
 39e:	30 0d       	add	r19, r0
 3a0:	11 24       	eor	r1, r1
 3a2:	ca 01       	movw	r24, r20
 3a4:	82 1b       	sub	r24, r18
 3a6:	93 0b       	sbc	r25, r19
 3a8:	9c 01       	movw	r18, r24
 3aa:	ad ec       	ldi	r26, 0xCD	; 205
 3ac:	bc ec       	ldi	r27, 0xCC	; 204
 3ae:	df d0       	rcall	.+446    	; 0x56e <__umulhisi3>
 3b0:	96 95       	lsr	r25
 3b2:	87 95       	ror	r24
 3b4:	96 95       	lsr	r25
 3b6:	87 95       	ror	r24
 3b8:	96 95       	lsr	r25
 3ba:	87 95       	ror	r24
 3bc:	68 2f       	mov	r22, r24
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	95 de       	rcall	.-726    	; 0xec <displayFND>
 3c2:	4e c0       	rjmp	.+156    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
	}
	else if(timercounter0%4 == 2){
 3c4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timercounter0>
 3c8:	83 70       	andi	r24, 0x03	; 3
 3ca:	82 30       	cpi	r24, 0x02	; 2
 3cc:	71 f5       	brne	.+92     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		displayFND(2, FndValue%1000/100);  // 100???먮━
 3ce:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <__data_end>
 3d2:	50 91 1d 01 	lds	r21, 0x011D	; 0x80011d <__data_end+0x1>
 3d6:	9a 01       	movw	r18, r20
 3d8:	36 95       	lsr	r19
 3da:	27 95       	ror	r18
 3dc:	36 95       	lsr	r19
 3de:	27 95       	ror	r18
 3e0:	36 95       	lsr	r19
 3e2:	27 95       	ror	r18
 3e4:	a5 ec       	ldi	r26, 0xC5	; 197
 3e6:	b0 e2       	ldi	r27, 0x20	; 32
 3e8:	c2 d0       	rcall	.+388    	; 0x56e <__umulhisi3>
 3ea:	92 95       	swap	r25
 3ec:	82 95       	swap	r24
 3ee:	8f 70       	andi	r24, 0x0F	; 15
 3f0:	89 27       	eor	r24, r25
 3f2:	9f 70       	andi	r25, 0x0F	; 15
 3f4:	89 27       	eor	r24, r25
 3f6:	68 ee       	ldi	r22, 0xE8	; 232
 3f8:	73 e0       	ldi	r23, 0x03	; 3
 3fa:	86 9f       	mul	r24, r22
 3fc:	90 01       	movw	r18, r0
 3fe:	87 9f       	mul	r24, r23
 400:	30 0d       	add	r19, r0
 402:	96 9f       	mul	r25, r22
 404:	30 0d       	add	r19, r0
 406:	11 24       	eor	r1, r1
 408:	ca 01       	movw	r24, r20
 40a:	82 1b       	sub	r24, r18
 40c:	93 0b       	sbc	r25, r19
 40e:	9c 01       	movw	r18, r24
 410:	36 95       	lsr	r19
 412:	27 95       	ror	r18
 414:	36 95       	lsr	r19
 416:	27 95       	ror	r18
 418:	ab e7       	ldi	r26, 0x7B	; 123
 41a:	b4 e1       	ldi	r27, 0x14	; 20
 41c:	a8 d0       	rcall	.+336    	; 0x56e <__umulhisi3>
 41e:	96 95       	lsr	r25
 420:	87 95       	ror	r24
 422:	68 2f       	mov	r22, r24
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	62 de       	rcall	.-828    	; 0xec <displayFND>
 428:	1b c0       	rjmp	.+54     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
	}
	else if(timercounter0%4 == 3){
 42a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timercounter0>
 42e:	83 70       	andi	r24, 0x03	; 3
 430:	83 30       	cpi	r24, 0x03	; 3
 432:	b1 f4       	brne	.+44     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		displayFND(3, FndValue/1000);  // 1000???먮━
 434:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
 438:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
 43c:	36 95       	lsr	r19
 43e:	27 95       	ror	r18
 440:	36 95       	lsr	r19
 442:	27 95       	ror	r18
 444:	36 95       	lsr	r19
 446:	27 95       	ror	r18
 448:	a5 ec       	ldi	r26, 0xC5	; 197
 44a:	b0 e2       	ldi	r27, 0x20	; 32
 44c:	90 d0       	rcall	.+288    	; 0x56e <__umulhisi3>
 44e:	92 95       	swap	r25
 450:	82 95       	swap	r24
 452:	8f 70       	andi	r24, 0x0F	; 15
 454:	89 27       	eor	r24, r25
 456:	9f 70       	andi	r25, 0x0F	; 15
 458:	89 27       	eor	r24, r25
 45a:	68 2f       	mov	r22, r24
 45c:	83 e0       	ldi	r24, 0x03	; 3
 45e:	46 de       	rcall	.-884    	; 0xec <displayFND>
	}
	
	timercounter0++;
 460:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timercounter0>
 464:	8f 5f       	subi	r24, 0xFF	; 255
 466:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timercounter0>
	
	if (timercounter0 >= 200){
 46a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timercounter0>
 46e:	88 3c       	cpi	r24, 0xC8	; 200
 470:	10 f0       	brcs	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
		timercounter0 = 0;
 472:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <timercounter0>
	}
}
 476:	ff 91       	pop	r31
 478:	ef 91       	pop	r30
 47a:	bf 91       	pop	r27
 47c:	af 91       	pop	r26
 47e:	9f 91       	pop	r25
 480:	8f 91       	pop	r24
 482:	7f 91       	pop	r23
 484:	6f 91       	pop	r22
 486:	5f 91       	pop	r21
 488:	4f 91       	pop	r20
 48a:	3f 91       	pop	r19
 48c:	2f 91       	pop	r18
 48e:	0f 90       	pop	r0
 490:	0b be       	out	0x3b, r0	; 59
 492:	0f 90       	pop	r0
 494:	0f be       	out	0x3f, r0	; 63
 496:	0f 90       	pop	r0
 498:	1f 90       	pop	r1
 49a:	18 95       	reti

0000049c <main>:

int main(void)
{
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
 4a4:	64 97       	sbiw	r28, 0x14	; 20
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	f8 94       	cli
 4aa:	de bf       	out	0x3e, r29	; 62
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	cd bf       	out	0x3d, r28	; 61
	unsigned int count=0;
	char buffer[20];
	I2C_LCD_init();
 4b0:	e2 de       	rcall	.-572    	; 0x276 <I2C_LCD_init>
	FND_init();
 4b2:	18 de       	rcall	.-976    	; 0xe4 <FND_init>
 4b4:	78 94       	sei
	sei();
 4b6:	4a e0       	ldi	r20, 0x0A	; 10
	I2C_LCD_write_string_XY(0, 0, "hello world");
 4b8:	51 e0       	ldi	r21, 0x01	; 1
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	19 df       	rcall	.-462    	; 0x2f2 <I2C_LCD_write_string_XY>
 4c0:	00 e0       	ldi	r16, 0x00	; 0
	}
}

int main(void)
{
	unsigned int count=0;
 4c2:	10 e0       	ldi	r17, 0x00	; 0
 4c4:	0f 2e       	mov	r0, r31
	sei();
	I2C_LCD_write_string_XY(0, 0, "hello world");
	
	while (1)
	{
		sprintf(buffer, "%05d", count);
 4c6:	f6 e1       	ldi	r31, 0x16	; 22
 4c8:	cf 2e       	mov	r12, r31
 4ca:	f1 e0       	ldi	r31, 0x01	; 1
 4cc:	df 2e       	mov	r13, r31
 4ce:	f0 2d       	mov	r31, r0
 4d0:	ce 01       	movw	r24, r28
 4d2:	01 96       	adiw	r24, 0x01	; 1
 4d4:	7c 01       	movw	r14, r24
 4d6:	1f 93       	push	r17
 4d8:	0f 93       	push	r16
 4da:	df 92       	push	r13
 4dc:	cf 92       	push	r12
 4de:	ff 92       	push	r15
 4e0:	ef 92       	push	r14
 4e2:	54 d0       	rcall	.+168    	; 0x58c <sprintf>
 4e4:	a7 01       	movw	r20, r14
		I2C_LCD_write_string_XY(1,0, buffer);
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	03 df       	rcall	.-506    	; 0x2f2 <I2C_LCD_write_string_XY>
 4ec:	10 93 1d 01 	sts	0x011D, r17	; 0x80011d <__data_end+0x1>
volatile uint8_t timercounter0 = 0;
volatile unsigned int FndValue = 0;

void SetFndValue(int value)
{
	FndValue = value;
 4f0:	00 93 1c 01 	sts	0x011C, r16	; 0x80011c <__data_end>
 4f4:	0f 5f       	subi	r16, 0xFF	; 255
 4f6:	1f 4f       	sbci	r17, 0xFF	; 255
	while (1)
	{
		sprintf(buffer, "%05d", count);
		I2C_LCD_write_string_XY(1,0, buffer);
		SetFndValue(count);
		count++;
 4f8:	8f e3       	ldi	r24, 0x3F	; 63
 4fa:	9c e9       	ldi	r25, 0x9C	; 156
 4fc:	01 97       	sbiw	r24, 0x01	; 1
 4fe:	f1 f7       	brne	.-4      	; 0x4fc <main+0x60>
 500:	00 c0       	rjmp	.+0      	; 0x502 <main+0x66>
 502:	00 00       	nop
 504:	0f 90       	pop	r0
 506:	0f 90       	pop	r0
 508:	0f 90       	pop	r0
 50a:	0f 90       	pop	r0
 50c:	0f 90       	pop	r0
 50e:	0f 90       	pop	r0
 510:	e2 cf       	rjmp	.-60     	; 0x4d6 <main+0x3a>

00000512 <ShiftRegisterInit>:

#include "ShiftRegister.h"

void ShiftRegisterInit(void)
{
	setbit(SHIFT_REGISTER_DDR, SHIFT_REGISTER_LATCH_PIN);
 512:	d1 9a       	sbi	0x1a, 1	; 26
	setbit(SHIFT_REGISTER_DDR, SHIFT_REGISTER_CLOCK_PIN);
 514:	d0 9a       	sbi	0x1a, 0	; 26
	setbit(SHIFT_REGISTER_DDR, SHIFT_REGISTER_DATA_PIN);
 516:	d2 9a       	sbi	0x1a, 2	; 26
	clearbit(SHIFT_REGISTER_PORT, SHIFT_REGISTER_LATCH_PIN);
 518:	d9 98       	cbi	0x1b, 1	; 27
	clearbit(SHIFT_REGISTER_PORT, SHIFT_REGISTER_CLOCK_PIN);
 51a:	d8 98       	cbi	0x1b, 0	; 27
	clearbit(SHIFT_REGISTER_PORT, SHIFT_REGISTER_DATA_PIN);
 51c:	da 98       	cbi	0x1b, 2	; 27
 51e:	08 95       	ret

00000520 <ShiftRegisterClock>:
	ShiftRegisterLatch();  // latch shift data after shift 8times.
}

void ShiftRegisterClock(void)
{
	clearbit(SHIFT_REGISTER_PORT, SHIFT_REGISTER_CLOCK_PIN);
 520:	d8 98       	cbi	0x1b, 0	; 27
	setbit(SHIFT_REGISTER_PORT, SHIFT_REGISTER_CLOCK_PIN);
 522:	d8 9a       	sbi	0x1b, 0	; 27
	clearbit(SHIFT_REGISTER_PORT, SHIFT_REGISTER_CLOCK_PIN);
 524:	d8 98       	cbi	0x1b, 0	; 27
 526:	08 95       	ret

00000528 <ShiftRegisterLatch>:
}

void ShiftRegisterLatch(void)
{
	clearbit(SHIFT_REGISTER_PORT, SHIFT_REGISTER_LATCH_PIN);
 528:	d9 98       	cbi	0x1b, 1	; 27
	setbit(SHIFT_REGISTER_PORT, SHIFT_REGISTER_LATCH_PIN);
 52a:	d9 9a       	sbi	0x1b, 1	; 27
	clearbit(SHIFT_REGISTER_PORT, SHIFT_REGISTER_LATCH_PIN);
 52c:	d9 98       	cbi	0x1b, 1	; 27
 52e:	08 95       	ret

00000530 <ShiftRegisterDataWrite>:
	clearbit(SHIFT_REGISTER_PORT, SHIFT_REGISTER_CLOCK_PIN);
	clearbit(SHIFT_REGISTER_PORT, SHIFT_REGISTER_DATA_PIN);
}

void ShiftRegisterDataWrite(uint8_t data)
{
 530:	0f 93       	push	r16
 532:	1f 93       	push	r17
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
	for (int i=0; i<8; i++)           // ex) data = 0b11000011
 538:	c0 e0       	ldi	r28, 0x00	; 0
 53a:	d0 e0       	ldi	r29, 0x00	; 0
	{                                 // ex) (0b11000011 << 0) & 0x01 ===> 0b11000011 & 0b10000000  ====> 0b10000000 ==> true
 		if ( (data<<i) & 0x80 )       // ex) (0b11000011 << 3) & 0x01 ===> 0b00011000 & 0b10000000  ====> 0b00000000 ==> false
 53c:	08 2f       	mov	r16, r24
 53e:	10 e0       	ldi	r17, 0x00	; 0
 540:	98 01       	movw	r18, r16
 542:	0c 2e       	mov	r0, r28
 544:	02 c0       	rjmp	.+4      	; 0x54a <ShiftRegisterDataWrite+0x1a>
 546:	22 0f       	add	r18, r18
 548:	33 1f       	adc	r19, r19
 54a:	0a 94       	dec	r0
 54c:	e2 f7       	brpl	.-8      	; 0x546 <ShiftRegisterDataWrite+0x16>
 54e:	27 ff       	sbrs	r18, 7
 550:	02 c0       	rjmp	.+4      	; 0x556 <ShiftRegisterDataWrite+0x26>
 			setbit(SHIFT_REGISTER_PORT, SHIFT_REGISTER_DATA_PIN);    // data bit high
 552:	da 9a       	sbi	0x1b, 2	; 27
 554:	01 c0       	rjmp	.+2      	; 0x558 <ShiftRegisterDataWrite+0x28>
 		else                                                        
 			clearbit(SHIFT_REGISTER_PORT, SHIFT_REGISTER_DATA_PIN);  // data bit low
 556:	da 98       	cbi	0x1b, 2	; 27
		
		//((data<<i) & 0x80) ? setbit(SHIFT_REGISTER_PORT, SHIFT_REGISTER_DATA_PIN) : clearbit(SHIFT_REGISTER_PORT, SHIFT_REGISTER_DATA_PIN);
		ShiftRegisterClock();
 558:	e3 df       	rcall	.-58     	; 0x520 <ShiftRegisterClock>
	clearbit(SHIFT_REGISTER_PORT, SHIFT_REGISTER_DATA_PIN);
}

void ShiftRegisterDataWrite(uint8_t data)
{
	for (int i=0; i<8; i++)           // ex) data = 0b11000011
 55a:	21 96       	adiw	r28, 0x01	; 1
 55c:	c8 30       	cpi	r28, 0x08	; 8
 55e:	d1 05       	cpc	r29, r1
 			clearbit(SHIFT_REGISTER_PORT, SHIFT_REGISTER_DATA_PIN);  // data bit low
		
		//((data<<i) & 0x80) ? setbit(SHIFT_REGISTER_PORT, SHIFT_REGISTER_DATA_PIN) : clearbit(SHIFT_REGISTER_PORT, SHIFT_REGISTER_DATA_PIN);
		ShiftRegisterClock();
	}
	ShiftRegisterLatch();  // latch shift data after shift 8times.
 560:	79 f7       	brne	.-34     	; 0x540 <ShiftRegisterDataWrite+0x10>
 562:	e2 df       	rcall	.-60     	; 0x528 <ShiftRegisterLatch>
}
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	1f 91       	pop	r17
 56a:	0f 91       	pop	r16
 56c:	08 95       	ret

0000056e <__umulhisi3>:
 56e:	a2 9f       	mul	r26, r18
 570:	b0 01       	movw	r22, r0
 572:	b3 9f       	mul	r27, r19
 574:	c0 01       	movw	r24, r0
 576:	a3 9f       	mul	r26, r19
 578:	70 0d       	add	r23, r0
 57a:	81 1d       	adc	r24, r1
 57c:	11 24       	eor	r1, r1
 57e:	91 1d       	adc	r25, r1
 580:	b2 9f       	mul	r27, r18
 582:	70 0d       	add	r23, r0
 584:	81 1d       	adc	r24, r1
 586:	11 24       	eor	r1, r1
 588:	91 1d       	adc	r25, r1
 58a:	08 95       	ret

0000058c <sprintf>:
 58c:	0f 93       	push	r16
 58e:	1f 93       	push	r17
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
 598:	2e 97       	sbiw	r28, 0x0e	; 14
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	f8 94       	cli
 59e:	de bf       	out	0x3e, r29	; 62
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	cd bf       	out	0x3d, r28	; 61
 5a4:	0d 89       	ldd	r16, Y+21	; 0x15
 5a6:	1e 89       	ldd	r17, Y+22	; 0x16
 5a8:	86 e0       	ldi	r24, 0x06	; 6
 5aa:	8c 83       	std	Y+4, r24	; 0x04
 5ac:	1a 83       	std	Y+2, r17	; 0x02
 5ae:	09 83       	std	Y+1, r16	; 0x01
 5b0:	8f ef       	ldi	r24, 0xFF	; 255
 5b2:	9f e7       	ldi	r25, 0x7F	; 127
 5b4:	9e 83       	std	Y+6, r25	; 0x06
 5b6:	8d 83       	std	Y+5, r24	; 0x05
 5b8:	ae 01       	movw	r20, r28
 5ba:	47 5e       	subi	r20, 0xE7	; 231
 5bc:	5f 4f       	sbci	r21, 0xFF	; 255
 5be:	6f 89       	ldd	r22, Y+23	; 0x17
 5c0:	78 8d       	ldd	r23, Y+24	; 0x18
 5c2:	ce 01       	movw	r24, r28
 5c4:	01 96       	adiw	r24, 0x01	; 1
 5c6:	10 d0       	rcall	.+32     	; 0x5e8 <vfprintf>
 5c8:	ef 81       	ldd	r30, Y+7	; 0x07
 5ca:	f8 85       	ldd	r31, Y+8	; 0x08
 5cc:	e0 0f       	add	r30, r16
 5ce:	f1 1f       	adc	r31, r17
 5d0:	10 82       	st	Z, r1
 5d2:	2e 96       	adiw	r28, 0x0e	; 14
 5d4:	0f b6       	in	r0, 0x3f	; 63
 5d6:	f8 94       	cli
 5d8:	de bf       	out	0x3e, r29	; 62
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	cd bf       	out	0x3d, r28	; 61
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	08 95       	ret

000005e8 <vfprintf>:
 5e8:	2f 92       	push	r2
 5ea:	3f 92       	push	r3
 5ec:	4f 92       	push	r4
 5ee:	5f 92       	push	r5
 5f0:	6f 92       	push	r6
 5f2:	7f 92       	push	r7
 5f4:	8f 92       	push	r8
 5f6:	9f 92       	push	r9
 5f8:	af 92       	push	r10
 5fa:	bf 92       	push	r11
 5fc:	cf 92       	push	r12
 5fe:	df 92       	push	r13
 600:	ef 92       	push	r14
 602:	ff 92       	push	r15
 604:	0f 93       	push	r16
 606:	1f 93       	push	r17
 608:	cf 93       	push	r28
 60a:	df 93       	push	r29
 60c:	cd b7       	in	r28, 0x3d	; 61
 60e:	de b7       	in	r29, 0x3e	; 62
 610:	2b 97       	sbiw	r28, 0x0b	; 11
 612:	0f b6       	in	r0, 0x3f	; 63
 614:	f8 94       	cli
 616:	de bf       	out	0x3e, r29	; 62
 618:	0f be       	out	0x3f, r0	; 63
 61a:	cd bf       	out	0x3d, r28	; 61
 61c:	6c 01       	movw	r12, r24
 61e:	7b 01       	movw	r14, r22
 620:	8a 01       	movw	r16, r20
 622:	fc 01       	movw	r30, r24
 624:	17 82       	std	Z+7, r1	; 0x07
 626:	16 82       	std	Z+6, r1	; 0x06
 628:	83 81       	ldd	r24, Z+3	; 0x03
 62a:	81 ff       	sbrs	r24, 1
 62c:	bf c1       	rjmp	.+894    	; 0x9ac <vfprintf+0x3c4>
 62e:	ce 01       	movw	r24, r28
 630:	01 96       	adiw	r24, 0x01	; 1
 632:	3c 01       	movw	r6, r24
 634:	f6 01       	movw	r30, r12
 636:	93 81       	ldd	r25, Z+3	; 0x03
 638:	f7 01       	movw	r30, r14
 63a:	93 fd       	sbrc	r25, 3
 63c:	85 91       	lpm	r24, Z+
 63e:	93 ff       	sbrs	r25, 3
 640:	81 91       	ld	r24, Z+
 642:	7f 01       	movw	r14, r30
 644:	88 23       	and	r24, r24
 646:	09 f4       	brne	.+2      	; 0x64a <vfprintf+0x62>
 648:	ad c1       	rjmp	.+858    	; 0x9a4 <vfprintf+0x3bc>
 64a:	85 32       	cpi	r24, 0x25	; 37
 64c:	39 f4       	brne	.+14     	; 0x65c <vfprintf+0x74>
 64e:	93 fd       	sbrc	r25, 3
 650:	85 91       	lpm	r24, Z+
 652:	93 ff       	sbrs	r25, 3
 654:	81 91       	ld	r24, Z+
 656:	7f 01       	movw	r14, r30
 658:	85 32       	cpi	r24, 0x25	; 37
 65a:	21 f4       	brne	.+8      	; 0x664 <vfprintf+0x7c>
 65c:	b6 01       	movw	r22, r12
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	d6 d1       	rcall	.+940    	; 0xa0e <fputc>
 662:	e8 cf       	rjmp	.-48     	; 0x634 <vfprintf+0x4c>
 664:	91 2c       	mov	r9, r1
 666:	21 2c       	mov	r2, r1
 668:	31 2c       	mov	r3, r1
 66a:	ff e1       	ldi	r31, 0x1F	; 31
 66c:	f3 15       	cp	r31, r3
 66e:	d8 f0       	brcs	.+54     	; 0x6a6 <vfprintf+0xbe>
 670:	8b 32       	cpi	r24, 0x2B	; 43
 672:	79 f0       	breq	.+30     	; 0x692 <vfprintf+0xaa>
 674:	38 f4       	brcc	.+14     	; 0x684 <vfprintf+0x9c>
 676:	80 32       	cpi	r24, 0x20	; 32
 678:	79 f0       	breq	.+30     	; 0x698 <vfprintf+0xb0>
 67a:	83 32       	cpi	r24, 0x23	; 35
 67c:	a1 f4       	brne	.+40     	; 0x6a6 <vfprintf+0xbe>
 67e:	23 2d       	mov	r18, r3
 680:	20 61       	ori	r18, 0x10	; 16
 682:	1d c0       	rjmp	.+58     	; 0x6be <vfprintf+0xd6>
 684:	8d 32       	cpi	r24, 0x2D	; 45
 686:	61 f0       	breq	.+24     	; 0x6a0 <vfprintf+0xb8>
 688:	80 33       	cpi	r24, 0x30	; 48
 68a:	69 f4       	brne	.+26     	; 0x6a6 <vfprintf+0xbe>
 68c:	23 2d       	mov	r18, r3
 68e:	21 60       	ori	r18, 0x01	; 1
 690:	16 c0       	rjmp	.+44     	; 0x6be <vfprintf+0xd6>
 692:	83 2d       	mov	r24, r3
 694:	82 60       	ori	r24, 0x02	; 2
 696:	38 2e       	mov	r3, r24
 698:	e3 2d       	mov	r30, r3
 69a:	e4 60       	ori	r30, 0x04	; 4
 69c:	3e 2e       	mov	r3, r30
 69e:	2a c0       	rjmp	.+84     	; 0x6f4 <vfprintf+0x10c>
 6a0:	f3 2d       	mov	r31, r3
 6a2:	f8 60       	ori	r31, 0x08	; 8
 6a4:	1d c0       	rjmp	.+58     	; 0x6e0 <vfprintf+0xf8>
 6a6:	37 fc       	sbrc	r3, 7
 6a8:	2d c0       	rjmp	.+90     	; 0x704 <vfprintf+0x11c>
 6aa:	20 ed       	ldi	r18, 0xD0	; 208
 6ac:	28 0f       	add	r18, r24
 6ae:	2a 30       	cpi	r18, 0x0A	; 10
 6b0:	40 f0       	brcs	.+16     	; 0x6c2 <vfprintf+0xda>
 6b2:	8e 32       	cpi	r24, 0x2E	; 46
 6b4:	b9 f4       	brne	.+46     	; 0x6e4 <vfprintf+0xfc>
 6b6:	36 fc       	sbrc	r3, 6
 6b8:	75 c1       	rjmp	.+746    	; 0x9a4 <vfprintf+0x3bc>
 6ba:	23 2d       	mov	r18, r3
 6bc:	20 64       	ori	r18, 0x40	; 64
 6be:	32 2e       	mov	r3, r18
 6c0:	19 c0       	rjmp	.+50     	; 0x6f4 <vfprintf+0x10c>
 6c2:	36 fe       	sbrs	r3, 6
 6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <vfprintf+0xea>
 6c6:	8a e0       	ldi	r24, 0x0A	; 10
 6c8:	98 9e       	mul	r9, r24
 6ca:	20 0d       	add	r18, r0
 6cc:	11 24       	eor	r1, r1
 6ce:	92 2e       	mov	r9, r18
 6d0:	11 c0       	rjmp	.+34     	; 0x6f4 <vfprintf+0x10c>
 6d2:	ea e0       	ldi	r30, 0x0A	; 10
 6d4:	2e 9e       	mul	r2, r30
 6d6:	20 0d       	add	r18, r0
 6d8:	11 24       	eor	r1, r1
 6da:	22 2e       	mov	r2, r18
 6dc:	f3 2d       	mov	r31, r3
 6de:	f0 62       	ori	r31, 0x20	; 32
 6e0:	3f 2e       	mov	r3, r31
 6e2:	08 c0       	rjmp	.+16     	; 0x6f4 <vfprintf+0x10c>
 6e4:	8c 36       	cpi	r24, 0x6C	; 108
 6e6:	21 f4       	brne	.+8      	; 0x6f0 <vfprintf+0x108>
 6e8:	83 2d       	mov	r24, r3
 6ea:	80 68       	ori	r24, 0x80	; 128
 6ec:	38 2e       	mov	r3, r24
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <vfprintf+0x10c>
 6f0:	88 36       	cpi	r24, 0x68	; 104
 6f2:	41 f4       	brne	.+16     	; 0x704 <vfprintf+0x11c>
 6f4:	f7 01       	movw	r30, r14
 6f6:	93 fd       	sbrc	r25, 3
 6f8:	85 91       	lpm	r24, Z+
 6fa:	93 ff       	sbrs	r25, 3
 6fc:	81 91       	ld	r24, Z+
 6fe:	7f 01       	movw	r14, r30
 700:	81 11       	cpse	r24, r1
 702:	b3 cf       	rjmp	.-154    	; 0x66a <vfprintf+0x82>
 704:	98 2f       	mov	r25, r24
 706:	9f 7d       	andi	r25, 0xDF	; 223
 708:	95 54       	subi	r25, 0x45	; 69
 70a:	93 30       	cpi	r25, 0x03	; 3
 70c:	28 f4       	brcc	.+10     	; 0x718 <vfprintf+0x130>
 70e:	0c 5f       	subi	r16, 0xFC	; 252
 710:	1f 4f       	sbci	r17, 0xFF	; 255
 712:	9f e3       	ldi	r25, 0x3F	; 63
 714:	99 83       	std	Y+1, r25	; 0x01
 716:	0d c0       	rjmp	.+26     	; 0x732 <vfprintf+0x14a>
 718:	83 36       	cpi	r24, 0x63	; 99
 71a:	31 f0       	breq	.+12     	; 0x728 <vfprintf+0x140>
 71c:	83 37       	cpi	r24, 0x73	; 115
 71e:	71 f0       	breq	.+28     	; 0x73c <vfprintf+0x154>
 720:	83 35       	cpi	r24, 0x53	; 83
 722:	09 f0       	breq	.+2      	; 0x726 <vfprintf+0x13e>
 724:	55 c0       	rjmp	.+170    	; 0x7d0 <vfprintf+0x1e8>
 726:	20 c0       	rjmp	.+64     	; 0x768 <vfprintf+0x180>
 728:	f8 01       	movw	r30, r16
 72a:	80 81       	ld	r24, Z
 72c:	89 83       	std	Y+1, r24	; 0x01
 72e:	0e 5f       	subi	r16, 0xFE	; 254
 730:	1f 4f       	sbci	r17, 0xFF	; 255
 732:	88 24       	eor	r8, r8
 734:	83 94       	inc	r8
 736:	91 2c       	mov	r9, r1
 738:	53 01       	movw	r10, r6
 73a:	12 c0       	rjmp	.+36     	; 0x760 <vfprintf+0x178>
 73c:	28 01       	movw	r4, r16
 73e:	f2 e0       	ldi	r31, 0x02	; 2
 740:	4f 0e       	add	r4, r31
 742:	51 1c       	adc	r5, r1
 744:	f8 01       	movw	r30, r16
 746:	a0 80       	ld	r10, Z
 748:	b1 80       	ldd	r11, Z+1	; 0x01
 74a:	36 fe       	sbrs	r3, 6
 74c:	03 c0       	rjmp	.+6      	; 0x754 <vfprintf+0x16c>
 74e:	69 2d       	mov	r22, r9
 750:	70 e0       	ldi	r23, 0x00	; 0
 752:	02 c0       	rjmp	.+4      	; 0x758 <vfprintf+0x170>
 754:	6f ef       	ldi	r22, 0xFF	; 255
 756:	7f ef       	ldi	r23, 0xFF	; 255
 758:	c5 01       	movw	r24, r10
 75a:	4e d1       	rcall	.+668    	; 0x9f8 <strnlen>
 75c:	4c 01       	movw	r8, r24
 75e:	82 01       	movw	r16, r4
 760:	f3 2d       	mov	r31, r3
 762:	ff 77       	andi	r31, 0x7F	; 127
 764:	3f 2e       	mov	r3, r31
 766:	15 c0       	rjmp	.+42     	; 0x792 <vfprintf+0x1aa>
 768:	28 01       	movw	r4, r16
 76a:	22 e0       	ldi	r18, 0x02	; 2
 76c:	42 0e       	add	r4, r18
 76e:	51 1c       	adc	r5, r1
 770:	f8 01       	movw	r30, r16
 772:	a0 80       	ld	r10, Z
 774:	b1 80       	ldd	r11, Z+1	; 0x01
 776:	36 fe       	sbrs	r3, 6
 778:	03 c0       	rjmp	.+6      	; 0x780 <vfprintf+0x198>
 77a:	69 2d       	mov	r22, r9
 77c:	70 e0       	ldi	r23, 0x00	; 0
 77e:	02 c0       	rjmp	.+4      	; 0x784 <vfprintf+0x19c>
 780:	6f ef       	ldi	r22, 0xFF	; 255
 782:	7f ef       	ldi	r23, 0xFF	; 255
 784:	c5 01       	movw	r24, r10
 786:	2d d1       	rcall	.+602    	; 0x9e2 <strnlen_P>
 788:	4c 01       	movw	r8, r24
 78a:	f3 2d       	mov	r31, r3
 78c:	f0 68       	ori	r31, 0x80	; 128
 78e:	3f 2e       	mov	r3, r31
 790:	82 01       	movw	r16, r4
 792:	33 fc       	sbrc	r3, 3
 794:	19 c0       	rjmp	.+50     	; 0x7c8 <vfprintf+0x1e0>
 796:	82 2d       	mov	r24, r2
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	88 16       	cp	r8, r24
 79c:	99 06       	cpc	r9, r25
 79e:	a0 f4       	brcc	.+40     	; 0x7c8 <vfprintf+0x1e0>
 7a0:	b6 01       	movw	r22, r12
 7a2:	80 e2       	ldi	r24, 0x20	; 32
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	33 d1       	rcall	.+614    	; 0xa0e <fputc>
 7a8:	2a 94       	dec	r2
 7aa:	f5 cf       	rjmp	.-22     	; 0x796 <vfprintf+0x1ae>
 7ac:	f5 01       	movw	r30, r10
 7ae:	37 fc       	sbrc	r3, 7
 7b0:	85 91       	lpm	r24, Z+
 7b2:	37 fe       	sbrs	r3, 7
 7b4:	81 91       	ld	r24, Z+
 7b6:	5f 01       	movw	r10, r30
 7b8:	b6 01       	movw	r22, r12
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	28 d1       	rcall	.+592    	; 0xa0e <fputc>
 7be:	21 10       	cpse	r2, r1
 7c0:	2a 94       	dec	r2
 7c2:	21 e0       	ldi	r18, 0x01	; 1
 7c4:	82 1a       	sub	r8, r18
 7c6:	91 08       	sbc	r9, r1
 7c8:	81 14       	cp	r8, r1
 7ca:	91 04       	cpc	r9, r1
 7cc:	79 f7       	brne	.-34     	; 0x7ac <vfprintf+0x1c4>
 7ce:	e1 c0       	rjmp	.+450    	; 0x992 <vfprintf+0x3aa>
 7d0:	84 36       	cpi	r24, 0x64	; 100
 7d2:	11 f0       	breq	.+4      	; 0x7d8 <vfprintf+0x1f0>
 7d4:	89 36       	cpi	r24, 0x69	; 105
 7d6:	39 f5       	brne	.+78     	; 0x826 <vfprintf+0x23e>
 7d8:	f8 01       	movw	r30, r16
 7da:	37 fe       	sbrs	r3, 7
 7dc:	07 c0       	rjmp	.+14     	; 0x7ec <vfprintf+0x204>
 7de:	60 81       	ld	r22, Z
 7e0:	71 81       	ldd	r23, Z+1	; 0x01
 7e2:	82 81       	ldd	r24, Z+2	; 0x02
 7e4:	93 81       	ldd	r25, Z+3	; 0x03
 7e6:	0c 5f       	subi	r16, 0xFC	; 252
 7e8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ea:	08 c0       	rjmp	.+16     	; 0x7fc <vfprintf+0x214>
 7ec:	60 81       	ld	r22, Z
 7ee:	71 81       	ldd	r23, Z+1	; 0x01
 7f0:	07 2e       	mov	r0, r23
 7f2:	00 0c       	add	r0, r0
 7f4:	88 0b       	sbc	r24, r24
 7f6:	99 0b       	sbc	r25, r25
 7f8:	0e 5f       	subi	r16, 0xFE	; 254
 7fa:	1f 4f       	sbci	r17, 0xFF	; 255
 7fc:	f3 2d       	mov	r31, r3
 7fe:	ff 76       	andi	r31, 0x6F	; 111
 800:	3f 2e       	mov	r3, r31
 802:	97 ff       	sbrs	r25, 7
 804:	09 c0       	rjmp	.+18     	; 0x818 <vfprintf+0x230>
 806:	90 95       	com	r25
 808:	80 95       	com	r24
 80a:	70 95       	com	r23
 80c:	61 95       	neg	r22
 80e:	7f 4f       	sbci	r23, 0xFF	; 255
 810:	8f 4f       	sbci	r24, 0xFF	; 255
 812:	9f 4f       	sbci	r25, 0xFF	; 255
 814:	f0 68       	ori	r31, 0x80	; 128
 816:	3f 2e       	mov	r3, r31
 818:	2a e0       	ldi	r18, 0x0A	; 10
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	a3 01       	movw	r20, r6
 81e:	33 d1       	rcall	.+614    	; 0xa86 <__ultoa_invert>
 820:	88 2e       	mov	r8, r24
 822:	86 18       	sub	r8, r6
 824:	44 c0       	rjmp	.+136    	; 0x8ae <vfprintf+0x2c6>
 826:	85 37       	cpi	r24, 0x75	; 117
 828:	31 f4       	brne	.+12     	; 0x836 <vfprintf+0x24e>
 82a:	23 2d       	mov	r18, r3
 82c:	2f 7e       	andi	r18, 0xEF	; 239
 82e:	b2 2e       	mov	r11, r18
 830:	2a e0       	ldi	r18, 0x0A	; 10
 832:	30 e0       	ldi	r19, 0x00	; 0
 834:	25 c0       	rjmp	.+74     	; 0x880 <vfprintf+0x298>
 836:	93 2d       	mov	r25, r3
 838:	99 7f       	andi	r25, 0xF9	; 249
 83a:	b9 2e       	mov	r11, r25
 83c:	8f 36       	cpi	r24, 0x6F	; 111
 83e:	c1 f0       	breq	.+48     	; 0x870 <vfprintf+0x288>
 840:	18 f4       	brcc	.+6      	; 0x848 <vfprintf+0x260>
 842:	88 35       	cpi	r24, 0x58	; 88
 844:	79 f0       	breq	.+30     	; 0x864 <vfprintf+0x27c>
 846:	ae c0       	rjmp	.+348    	; 0x9a4 <vfprintf+0x3bc>
 848:	80 37       	cpi	r24, 0x70	; 112
 84a:	19 f0       	breq	.+6      	; 0x852 <vfprintf+0x26a>
 84c:	88 37       	cpi	r24, 0x78	; 120
 84e:	21 f0       	breq	.+8      	; 0x858 <vfprintf+0x270>
 850:	a9 c0       	rjmp	.+338    	; 0x9a4 <vfprintf+0x3bc>
 852:	e9 2f       	mov	r30, r25
 854:	e0 61       	ori	r30, 0x10	; 16
 856:	be 2e       	mov	r11, r30
 858:	b4 fe       	sbrs	r11, 4
 85a:	0d c0       	rjmp	.+26     	; 0x876 <vfprintf+0x28e>
 85c:	fb 2d       	mov	r31, r11
 85e:	f4 60       	ori	r31, 0x04	; 4
 860:	bf 2e       	mov	r11, r31
 862:	09 c0       	rjmp	.+18     	; 0x876 <vfprintf+0x28e>
 864:	34 fe       	sbrs	r3, 4
 866:	0a c0       	rjmp	.+20     	; 0x87c <vfprintf+0x294>
 868:	29 2f       	mov	r18, r25
 86a:	26 60       	ori	r18, 0x06	; 6
 86c:	b2 2e       	mov	r11, r18
 86e:	06 c0       	rjmp	.+12     	; 0x87c <vfprintf+0x294>
 870:	28 e0       	ldi	r18, 0x08	; 8
 872:	30 e0       	ldi	r19, 0x00	; 0
 874:	05 c0       	rjmp	.+10     	; 0x880 <vfprintf+0x298>
 876:	20 e1       	ldi	r18, 0x10	; 16
 878:	30 e0       	ldi	r19, 0x00	; 0
 87a:	02 c0       	rjmp	.+4      	; 0x880 <vfprintf+0x298>
 87c:	20 e1       	ldi	r18, 0x10	; 16
 87e:	32 e0       	ldi	r19, 0x02	; 2
 880:	f8 01       	movw	r30, r16
 882:	b7 fe       	sbrs	r11, 7
 884:	07 c0       	rjmp	.+14     	; 0x894 <vfprintf+0x2ac>
 886:	60 81       	ld	r22, Z
 888:	71 81       	ldd	r23, Z+1	; 0x01
 88a:	82 81       	ldd	r24, Z+2	; 0x02
 88c:	93 81       	ldd	r25, Z+3	; 0x03
 88e:	0c 5f       	subi	r16, 0xFC	; 252
 890:	1f 4f       	sbci	r17, 0xFF	; 255
 892:	06 c0       	rjmp	.+12     	; 0x8a0 <vfprintf+0x2b8>
 894:	60 81       	ld	r22, Z
 896:	71 81       	ldd	r23, Z+1	; 0x01
 898:	80 e0       	ldi	r24, 0x00	; 0
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	0e 5f       	subi	r16, 0xFE	; 254
 89e:	1f 4f       	sbci	r17, 0xFF	; 255
 8a0:	a3 01       	movw	r20, r6
 8a2:	f1 d0       	rcall	.+482    	; 0xa86 <__ultoa_invert>
 8a4:	88 2e       	mov	r8, r24
 8a6:	86 18       	sub	r8, r6
 8a8:	fb 2d       	mov	r31, r11
 8aa:	ff 77       	andi	r31, 0x7F	; 127
 8ac:	3f 2e       	mov	r3, r31
 8ae:	36 fe       	sbrs	r3, 6
 8b0:	0d c0       	rjmp	.+26     	; 0x8cc <vfprintf+0x2e4>
 8b2:	23 2d       	mov	r18, r3
 8b4:	2e 7f       	andi	r18, 0xFE	; 254
 8b6:	a2 2e       	mov	r10, r18
 8b8:	89 14       	cp	r8, r9
 8ba:	58 f4       	brcc	.+22     	; 0x8d2 <vfprintf+0x2ea>
 8bc:	34 fe       	sbrs	r3, 4
 8be:	0b c0       	rjmp	.+22     	; 0x8d6 <vfprintf+0x2ee>
 8c0:	32 fc       	sbrc	r3, 2
 8c2:	09 c0       	rjmp	.+18     	; 0x8d6 <vfprintf+0x2ee>
 8c4:	83 2d       	mov	r24, r3
 8c6:	8e 7e       	andi	r24, 0xEE	; 238
 8c8:	a8 2e       	mov	r10, r24
 8ca:	05 c0       	rjmp	.+10     	; 0x8d6 <vfprintf+0x2ee>
 8cc:	b8 2c       	mov	r11, r8
 8ce:	a3 2c       	mov	r10, r3
 8d0:	03 c0       	rjmp	.+6      	; 0x8d8 <vfprintf+0x2f0>
 8d2:	b8 2c       	mov	r11, r8
 8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <vfprintf+0x2f0>
 8d6:	b9 2c       	mov	r11, r9
 8d8:	a4 fe       	sbrs	r10, 4
 8da:	0f c0       	rjmp	.+30     	; 0x8fa <vfprintf+0x312>
 8dc:	fe 01       	movw	r30, r28
 8de:	e8 0d       	add	r30, r8
 8e0:	f1 1d       	adc	r31, r1
 8e2:	80 81       	ld	r24, Z
 8e4:	80 33       	cpi	r24, 0x30	; 48
 8e6:	21 f4       	brne	.+8      	; 0x8f0 <vfprintf+0x308>
 8e8:	9a 2d       	mov	r25, r10
 8ea:	99 7e       	andi	r25, 0xE9	; 233
 8ec:	a9 2e       	mov	r10, r25
 8ee:	09 c0       	rjmp	.+18     	; 0x902 <vfprintf+0x31a>
 8f0:	a2 fe       	sbrs	r10, 2
 8f2:	06 c0       	rjmp	.+12     	; 0x900 <vfprintf+0x318>
 8f4:	b3 94       	inc	r11
 8f6:	b3 94       	inc	r11
 8f8:	04 c0       	rjmp	.+8      	; 0x902 <vfprintf+0x31a>
 8fa:	8a 2d       	mov	r24, r10
 8fc:	86 78       	andi	r24, 0x86	; 134
 8fe:	09 f0       	breq	.+2      	; 0x902 <vfprintf+0x31a>
 900:	b3 94       	inc	r11
 902:	a3 fc       	sbrc	r10, 3
 904:	10 c0       	rjmp	.+32     	; 0x926 <vfprintf+0x33e>
 906:	a0 fe       	sbrs	r10, 0
 908:	06 c0       	rjmp	.+12     	; 0x916 <vfprintf+0x32e>
 90a:	b2 14       	cp	r11, r2
 90c:	80 f4       	brcc	.+32     	; 0x92e <vfprintf+0x346>
 90e:	28 0c       	add	r2, r8
 910:	92 2c       	mov	r9, r2
 912:	9b 18       	sub	r9, r11
 914:	0d c0       	rjmp	.+26     	; 0x930 <vfprintf+0x348>
 916:	b2 14       	cp	r11, r2
 918:	58 f4       	brcc	.+22     	; 0x930 <vfprintf+0x348>
 91a:	b6 01       	movw	r22, r12
 91c:	80 e2       	ldi	r24, 0x20	; 32
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	76 d0       	rcall	.+236    	; 0xa0e <fputc>
 922:	b3 94       	inc	r11
 924:	f8 cf       	rjmp	.-16     	; 0x916 <vfprintf+0x32e>
 926:	b2 14       	cp	r11, r2
 928:	18 f4       	brcc	.+6      	; 0x930 <vfprintf+0x348>
 92a:	2b 18       	sub	r2, r11
 92c:	02 c0       	rjmp	.+4      	; 0x932 <vfprintf+0x34a>
 92e:	98 2c       	mov	r9, r8
 930:	21 2c       	mov	r2, r1
 932:	a4 fe       	sbrs	r10, 4
 934:	0f c0       	rjmp	.+30     	; 0x954 <vfprintf+0x36c>
 936:	b6 01       	movw	r22, r12
 938:	80 e3       	ldi	r24, 0x30	; 48
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	68 d0       	rcall	.+208    	; 0xa0e <fputc>
 93e:	a2 fe       	sbrs	r10, 2
 940:	16 c0       	rjmp	.+44     	; 0x96e <vfprintf+0x386>
 942:	a1 fc       	sbrc	r10, 1
 944:	03 c0       	rjmp	.+6      	; 0x94c <vfprintf+0x364>
 946:	88 e7       	ldi	r24, 0x78	; 120
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	02 c0       	rjmp	.+4      	; 0x950 <vfprintf+0x368>
 94c:	88 e5       	ldi	r24, 0x58	; 88
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	b6 01       	movw	r22, r12
 952:	0c c0       	rjmp	.+24     	; 0x96c <vfprintf+0x384>
 954:	8a 2d       	mov	r24, r10
 956:	86 78       	andi	r24, 0x86	; 134
 958:	51 f0       	breq	.+20     	; 0x96e <vfprintf+0x386>
 95a:	a1 fe       	sbrs	r10, 1
 95c:	02 c0       	rjmp	.+4      	; 0x962 <vfprintf+0x37a>
 95e:	8b e2       	ldi	r24, 0x2B	; 43
 960:	01 c0       	rjmp	.+2      	; 0x964 <vfprintf+0x37c>
 962:	80 e2       	ldi	r24, 0x20	; 32
 964:	a7 fc       	sbrc	r10, 7
 966:	8d e2       	ldi	r24, 0x2D	; 45
 968:	b6 01       	movw	r22, r12
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	50 d0       	rcall	.+160    	; 0xa0e <fputc>
 96e:	89 14       	cp	r8, r9
 970:	30 f4       	brcc	.+12     	; 0x97e <vfprintf+0x396>
 972:	b6 01       	movw	r22, r12
 974:	80 e3       	ldi	r24, 0x30	; 48
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	4a d0       	rcall	.+148    	; 0xa0e <fputc>
 97a:	9a 94       	dec	r9
 97c:	f8 cf       	rjmp	.-16     	; 0x96e <vfprintf+0x386>
 97e:	8a 94       	dec	r8
 980:	f3 01       	movw	r30, r6
 982:	e8 0d       	add	r30, r8
 984:	f1 1d       	adc	r31, r1
 986:	80 81       	ld	r24, Z
 988:	b6 01       	movw	r22, r12
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	40 d0       	rcall	.+128    	; 0xa0e <fputc>
 98e:	81 10       	cpse	r8, r1
 990:	f6 cf       	rjmp	.-20     	; 0x97e <vfprintf+0x396>
 992:	22 20       	and	r2, r2
 994:	09 f4       	brne	.+2      	; 0x998 <vfprintf+0x3b0>
 996:	4e ce       	rjmp	.-868    	; 0x634 <vfprintf+0x4c>
 998:	b6 01       	movw	r22, r12
 99a:	80 e2       	ldi	r24, 0x20	; 32
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	37 d0       	rcall	.+110    	; 0xa0e <fputc>
 9a0:	2a 94       	dec	r2
 9a2:	f7 cf       	rjmp	.-18     	; 0x992 <vfprintf+0x3aa>
 9a4:	f6 01       	movw	r30, r12
 9a6:	86 81       	ldd	r24, Z+6	; 0x06
 9a8:	97 81       	ldd	r25, Z+7	; 0x07
 9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <vfprintf+0x3c8>
 9ac:	8f ef       	ldi	r24, 0xFF	; 255
 9ae:	9f ef       	ldi	r25, 0xFF	; 255
 9b0:	2b 96       	adiw	r28, 0x0b	; 11
 9b2:	0f b6       	in	r0, 0x3f	; 63
 9b4:	f8 94       	cli
 9b6:	de bf       	out	0x3e, r29	; 62
 9b8:	0f be       	out	0x3f, r0	; 63
 9ba:	cd bf       	out	0x3d, r28	; 61
 9bc:	df 91       	pop	r29
 9be:	cf 91       	pop	r28
 9c0:	1f 91       	pop	r17
 9c2:	0f 91       	pop	r16
 9c4:	ff 90       	pop	r15
 9c6:	ef 90       	pop	r14
 9c8:	df 90       	pop	r13
 9ca:	cf 90       	pop	r12
 9cc:	bf 90       	pop	r11
 9ce:	af 90       	pop	r10
 9d0:	9f 90       	pop	r9
 9d2:	8f 90       	pop	r8
 9d4:	7f 90       	pop	r7
 9d6:	6f 90       	pop	r6
 9d8:	5f 90       	pop	r5
 9da:	4f 90       	pop	r4
 9dc:	3f 90       	pop	r3
 9de:	2f 90       	pop	r2
 9e0:	08 95       	ret

000009e2 <strnlen_P>:
 9e2:	fc 01       	movw	r30, r24
 9e4:	05 90       	lpm	r0, Z+
 9e6:	61 50       	subi	r22, 0x01	; 1
 9e8:	70 40       	sbci	r23, 0x00	; 0
 9ea:	01 10       	cpse	r0, r1
 9ec:	d8 f7       	brcc	.-10     	; 0x9e4 <strnlen_P+0x2>
 9ee:	80 95       	com	r24
 9f0:	90 95       	com	r25
 9f2:	8e 0f       	add	r24, r30
 9f4:	9f 1f       	adc	r25, r31
 9f6:	08 95       	ret

000009f8 <strnlen>:
 9f8:	fc 01       	movw	r30, r24
 9fa:	61 50       	subi	r22, 0x01	; 1
 9fc:	70 40       	sbci	r23, 0x00	; 0
 9fe:	01 90       	ld	r0, Z+
 a00:	01 10       	cpse	r0, r1
 a02:	d8 f7       	brcc	.-10     	; 0x9fa <strnlen+0x2>
 a04:	80 95       	com	r24
 a06:	90 95       	com	r25
 a08:	8e 0f       	add	r24, r30
 a0a:	9f 1f       	adc	r25, r31
 a0c:	08 95       	ret

00000a0e <fputc>:
 a0e:	0f 93       	push	r16
 a10:	1f 93       	push	r17
 a12:	cf 93       	push	r28
 a14:	df 93       	push	r29
 a16:	fb 01       	movw	r30, r22
 a18:	23 81       	ldd	r18, Z+3	; 0x03
 a1a:	21 fd       	sbrc	r18, 1
 a1c:	03 c0       	rjmp	.+6      	; 0xa24 <fputc+0x16>
 a1e:	8f ef       	ldi	r24, 0xFF	; 255
 a20:	9f ef       	ldi	r25, 0xFF	; 255
 a22:	2c c0       	rjmp	.+88     	; 0xa7c <fputc+0x6e>
 a24:	22 ff       	sbrs	r18, 2
 a26:	16 c0       	rjmp	.+44     	; 0xa54 <fputc+0x46>
 a28:	46 81       	ldd	r20, Z+6	; 0x06
 a2a:	57 81       	ldd	r21, Z+7	; 0x07
 a2c:	24 81       	ldd	r18, Z+4	; 0x04
 a2e:	35 81       	ldd	r19, Z+5	; 0x05
 a30:	42 17       	cp	r20, r18
 a32:	53 07       	cpc	r21, r19
 a34:	44 f4       	brge	.+16     	; 0xa46 <fputc+0x38>
 a36:	a0 81       	ld	r26, Z
 a38:	b1 81       	ldd	r27, Z+1	; 0x01
 a3a:	9d 01       	movw	r18, r26
 a3c:	2f 5f       	subi	r18, 0xFF	; 255
 a3e:	3f 4f       	sbci	r19, 0xFF	; 255
 a40:	31 83       	std	Z+1, r19	; 0x01
 a42:	20 83       	st	Z, r18
 a44:	8c 93       	st	X, r24
 a46:	26 81       	ldd	r18, Z+6	; 0x06
 a48:	37 81       	ldd	r19, Z+7	; 0x07
 a4a:	2f 5f       	subi	r18, 0xFF	; 255
 a4c:	3f 4f       	sbci	r19, 0xFF	; 255
 a4e:	37 83       	std	Z+7, r19	; 0x07
 a50:	26 83       	std	Z+6, r18	; 0x06
 a52:	14 c0       	rjmp	.+40     	; 0xa7c <fputc+0x6e>
 a54:	8b 01       	movw	r16, r22
 a56:	ec 01       	movw	r28, r24
 a58:	fb 01       	movw	r30, r22
 a5a:	00 84       	ldd	r0, Z+8	; 0x08
 a5c:	f1 85       	ldd	r31, Z+9	; 0x09
 a5e:	e0 2d       	mov	r30, r0
 a60:	09 95       	icall
 a62:	89 2b       	or	r24, r25
 a64:	e1 f6       	brne	.-72     	; 0xa1e <fputc+0x10>
 a66:	d8 01       	movw	r26, r16
 a68:	16 96       	adiw	r26, 0x06	; 6
 a6a:	8d 91       	ld	r24, X+
 a6c:	9c 91       	ld	r25, X
 a6e:	17 97       	sbiw	r26, 0x07	; 7
 a70:	01 96       	adiw	r24, 0x01	; 1
 a72:	17 96       	adiw	r26, 0x07	; 7
 a74:	9c 93       	st	X, r25
 a76:	8e 93       	st	-X, r24
 a78:	16 97       	sbiw	r26, 0x06	; 6
 a7a:	ce 01       	movw	r24, r28
 a7c:	df 91       	pop	r29
 a7e:	cf 91       	pop	r28
 a80:	1f 91       	pop	r17
 a82:	0f 91       	pop	r16
 a84:	08 95       	ret

00000a86 <__ultoa_invert>:
 a86:	fa 01       	movw	r30, r20
 a88:	aa 27       	eor	r26, r26
 a8a:	28 30       	cpi	r18, 0x08	; 8
 a8c:	51 f1       	breq	.+84     	; 0xae2 <__ultoa_invert+0x5c>
 a8e:	20 31       	cpi	r18, 0x10	; 16
 a90:	81 f1       	breq	.+96     	; 0xaf2 <__ultoa_invert+0x6c>
 a92:	e8 94       	clt
 a94:	6f 93       	push	r22
 a96:	6e 7f       	andi	r22, 0xFE	; 254
 a98:	6e 5f       	subi	r22, 0xFE	; 254
 a9a:	7f 4f       	sbci	r23, 0xFF	; 255
 a9c:	8f 4f       	sbci	r24, 0xFF	; 255
 a9e:	9f 4f       	sbci	r25, 0xFF	; 255
 aa0:	af 4f       	sbci	r26, 0xFF	; 255
 aa2:	b1 e0       	ldi	r27, 0x01	; 1
 aa4:	3e d0       	rcall	.+124    	; 0xb22 <__ultoa_invert+0x9c>
 aa6:	b4 e0       	ldi	r27, 0x04	; 4
 aa8:	3c d0       	rcall	.+120    	; 0xb22 <__ultoa_invert+0x9c>
 aaa:	67 0f       	add	r22, r23
 aac:	78 1f       	adc	r23, r24
 aae:	89 1f       	adc	r24, r25
 ab0:	9a 1f       	adc	r25, r26
 ab2:	a1 1d       	adc	r26, r1
 ab4:	68 0f       	add	r22, r24
 ab6:	79 1f       	adc	r23, r25
 ab8:	8a 1f       	adc	r24, r26
 aba:	91 1d       	adc	r25, r1
 abc:	a1 1d       	adc	r26, r1
 abe:	6a 0f       	add	r22, r26
 ac0:	71 1d       	adc	r23, r1
 ac2:	81 1d       	adc	r24, r1
 ac4:	91 1d       	adc	r25, r1
 ac6:	a1 1d       	adc	r26, r1
 ac8:	20 d0       	rcall	.+64     	; 0xb0a <__ultoa_invert+0x84>
 aca:	09 f4       	brne	.+2      	; 0xace <__ultoa_invert+0x48>
 acc:	68 94       	set
 ace:	3f 91       	pop	r19
 ad0:	2a e0       	ldi	r18, 0x0A	; 10
 ad2:	26 9f       	mul	r18, r22
 ad4:	11 24       	eor	r1, r1
 ad6:	30 19       	sub	r19, r0
 ad8:	30 5d       	subi	r19, 0xD0	; 208
 ada:	31 93       	st	Z+, r19
 adc:	de f6       	brtc	.-74     	; 0xa94 <__ultoa_invert+0xe>
 ade:	cf 01       	movw	r24, r30
 ae0:	08 95       	ret
 ae2:	46 2f       	mov	r20, r22
 ae4:	47 70       	andi	r20, 0x07	; 7
 ae6:	40 5d       	subi	r20, 0xD0	; 208
 ae8:	41 93       	st	Z+, r20
 aea:	b3 e0       	ldi	r27, 0x03	; 3
 aec:	0f d0       	rcall	.+30     	; 0xb0c <__ultoa_invert+0x86>
 aee:	c9 f7       	brne	.-14     	; 0xae2 <__ultoa_invert+0x5c>
 af0:	f6 cf       	rjmp	.-20     	; 0xade <__ultoa_invert+0x58>
 af2:	46 2f       	mov	r20, r22
 af4:	4f 70       	andi	r20, 0x0F	; 15
 af6:	40 5d       	subi	r20, 0xD0	; 208
 af8:	4a 33       	cpi	r20, 0x3A	; 58
 afa:	18 f0       	brcs	.+6      	; 0xb02 <__ultoa_invert+0x7c>
 afc:	49 5d       	subi	r20, 0xD9	; 217
 afe:	31 fd       	sbrc	r19, 1
 b00:	40 52       	subi	r20, 0x20	; 32
 b02:	41 93       	st	Z+, r20
 b04:	02 d0       	rcall	.+4      	; 0xb0a <__ultoa_invert+0x84>
 b06:	a9 f7       	brne	.-22     	; 0xaf2 <__ultoa_invert+0x6c>
 b08:	ea cf       	rjmp	.-44     	; 0xade <__ultoa_invert+0x58>
 b0a:	b4 e0       	ldi	r27, 0x04	; 4
 b0c:	a6 95       	lsr	r26
 b0e:	97 95       	ror	r25
 b10:	87 95       	ror	r24
 b12:	77 95       	ror	r23
 b14:	67 95       	ror	r22
 b16:	ba 95       	dec	r27
 b18:	c9 f7       	brne	.-14     	; 0xb0c <__ultoa_invert+0x86>
 b1a:	00 97       	sbiw	r24, 0x00	; 0
 b1c:	61 05       	cpc	r22, r1
 b1e:	71 05       	cpc	r23, r1
 b20:	08 95       	ret
 b22:	9b 01       	movw	r18, r22
 b24:	ac 01       	movw	r20, r24
 b26:	0a 2e       	mov	r0, r26
 b28:	06 94       	lsr	r0
 b2a:	57 95       	ror	r21
 b2c:	47 95       	ror	r20
 b2e:	37 95       	ror	r19
 b30:	27 95       	ror	r18
 b32:	ba 95       	dec	r27
 b34:	c9 f7       	brne	.-14     	; 0xb28 <__ultoa_invert+0xa2>
 b36:	62 0f       	add	r22, r18
 b38:	73 1f       	adc	r23, r19
 b3a:	84 1f       	adc	r24, r20
 b3c:	95 1f       	adc	r25, r21
 b3e:	a0 1d       	adc	r26, r0
 b40:	08 95       	ret

00000b42 <_exit>:
 b42:	f8 94       	cli

00000b44 <__stop_program>:
 b44:	ff cf       	rjmp	.-2      	; 0xb44 <__stop_program>
