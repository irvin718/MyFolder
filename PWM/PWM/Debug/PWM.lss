
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001ae  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000244  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000971  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000822  00000000  00000000  00000c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000385  00000000  00000000  0000147f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001804  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041d  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  00001c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001d05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ea       	ldi	r30, 0xAE	; 174
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	58 d0       	rcall	.+176    	; 0x174 <main>
  c4:	72 c0       	rjmp	.+228    	; 0x1aa <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <avrInit>:
	}
}

void avrInit(void)
{
	DDRB = 0xff;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xff;
  cc:	88 bb       	out	0x18, r24	; 24
	DDRD = 0xff;
  ce:	81 bb       	out	0x11, r24	; 17
	PORTD = 0xff;
  d0:	82 bb       	out	0x12, r24	; 18
	DDRE = 0x00;
  d2:	12 b8       	out	0x02, r1	; 2
	PORTE = 0xff;
  d4:	83 b9       	out	0x03, r24	; 3
	
	TCCR0 |= (1<<CS02);   // 64분주
  d6:	83 b7       	in	r24, 0x33	; 51
  d8:	84 60       	ori	r24, 0x04	; 4
  da:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<WGM01) | (1<<WGM00);
  dc:	83 b7       	in	r24, 0x33	; 51
  de:	88 64       	ori	r24, 0x48	; 72
  e0:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<COM00) | (1<<COM01);
  e2:	83 b7       	in	r24, 0x33	; 51
  e4:	80 63       	ori	r24, 0x30	; 48
  e6:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<OCR0);   // 비교일치 인터럽트
  e8:	31 b7       	in	r19, 0x31	; 49
  ea:	27 b7       	in	r18, 0x37	; 55
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <avrInit+0x2e>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	3a 95       	dec	r19
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <avrInit+0x2a>
  fa:	82 2b       	or	r24, r18
  fc:	87 bf       	out	0x37, r24	; 55
  fe:	08 95       	ret

00000100 <GetSWSts1>:
}

uint8_t GetSWSts1(void)
{
	static unsigned char state_previous=1, state_current;
	state_current = (PINE & 0x20) >> 1;
 100:	81 b1       	in	r24, 0x01	; 1
 102:	80 72       	andi	r24, 0x20	; 32
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	95 95       	asr	r25
 108:	87 95       	ror	r24
 10a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state_current.1745>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	8f e3       	ldi	r24, 0x3F	; 63
 110:	9c e9       	ldi	r25, 0x9C	; 156
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <GetSWSts1+0x12>
 116:	00 c0       	rjmp	.+0      	; 0x118 <GetSWSts1+0x18>
 118:	00 00       	nop
	_delay_ms(10);
	if (state_current != state_previous)
 11a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <state_current.1745>
 11e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state_previous.1744>
 122:	98 17       	cp	r25, r24
 124:	39 f0       	breq	.+14     	; 0x134 <GetSWSts1+0x34>
	{
		state_previous = state_current;
 126:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <state_previous.1744>
		if (state_current == 0) return 1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	99 23       	and	r25, r25
 12e:	19 f0       	breq	.+6      	; 0x136 <GetSWSts1+0x36>
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	08 95       	ret
	}
	return 0;
 134:	80 e0       	ldi	r24, 0x00	; 0
}
 136:	08 95       	ret

00000138 <GetSWSts2>:

uint8_t GetSWSts2(void)
{
	static uint8_t state_previous=1, state_current;
	state_current = (PINE & 0x10) >> 2;
 138:	81 b1       	in	r24, 0x01	; 1
 13a:	80 71       	andi	r24, 0x10	; 16
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	95 95       	asr	r25
 140:	87 95       	ror	r24
 142:	95 95       	asr	r25
 144:	87 95       	ror	r24
 146:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 14a:	8f e3       	ldi	r24, 0x3F	; 63
 14c:	9c e9       	ldi	r25, 0x9C	; 156
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <GetSWSts2+0x16>
 152:	00 c0       	rjmp	.+0      	; 0x154 <GetSWSts2+0x1c>
 154:	00 00       	nop
	_delay_ms(10);
	if (state_current != state_previous)
 156:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15e:	98 17       	cp	r25, r24
 160:	39 f0       	breq	.+14     	; 0x170 <GetSWSts2+0x38>
	{
		state_previous = state_current;
 162:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
		if (state_current == 0) return 1;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	99 23       	and	r25, r25
 16a:	19 f0       	breq	.+6      	; 0x172 <GetSWSts2+0x3a>
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	08 95       	ret
	}
	return 0;
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	08 95       	ret

00000174 <main>:
void avrInit(void);


int main(void)
{
	avrInit();
 174:	a9 df       	rcall	.-174    	; 0xc8 <avrInit>
	OCR0 = 10;
 176:	8a e0       	ldi	r24, 0x0A	; 10
 178:	81 bf       	out	0x31, r24	; 49
	sei();                // 인터럽트 시작
 17a:	78 94       	sei
		if (GetSWSts1())
		{
			OCR0 = OCR0 + 5;
				if (OCR0 >= 250)
				{
					OCR0 = 250;
 17c:	ca ef       	ldi	r28, 0xFA	; 250
	avrInit();
	OCR0 = 10;
	sei();                // 인터럽트 시작
	while (1)
	{
		if (GetSWSts1())
 17e:	da e0       	ldi	r29, 0x0A	; 10
 180:	bf df       	rcall	.-130    	; 0x100 <GetSWSts1>
 182:	88 23       	and	r24, r24
 184:	39 f0       	breq	.+14     	; 0x194 <main+0x20>
		{
			OCR0 = OCR0 + 5;
 186:	81 b7       	in	r24, 0x31	; 49
 188:	8b 5f       	subi	r24, 0xFB	; 251
 18a:	81 bf       	out	0x31, r24	; 49
				if (OCR0 >= 250)
 18c:	81 b7       	in	r24, 0x31	; 49
 18e:	8a 3f       	cpi	r24, 0xFA	; 250
				{
					OCR0 = 250;
 190:	08 f0       	brcs	.+2      	; 0x194 <main+0x20>
				}
		}
		if (GetSWSts2())
 192:	c1 bf       	out	0x31, r28	; 49
 194:	d1 df       	rcall	.-94     	; 0x138 <GetSWSts2>
 196:	88 23       	and	r24, r24
 198:	99 f3       	breq	.-26     	; 0x180 <main+0xc>
		{
			OCR0 = OCR0 - 5;
 19a:	81 b7       	in	r24, 0x31	; 49
 19c:	85 50       	subi	r24, 0x05	; 5
 19e:	81 bf       	out	0x31, r24	; 49
			if (OCR0 <= 10)
 1a0:	81 b7       	in	r24, 0x31	; 49
 1a2:	8b 30       	cpi	r24, 0x0B	; 11
 1a4:	68 f7       	brcc	.-38     	; 0x180 <main+0xc>
			{
				OCR0 = 10;
 1a6:	d1 bf       	out	0x31, r29	; 49
 1a8:	eb cf       	rjmp	.-42     	; 0x180 <main+0xc>

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
