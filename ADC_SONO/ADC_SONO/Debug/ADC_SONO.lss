
ADC_SONO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000007a2  00000836  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800126  00800126  0000085c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000088c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c7d  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f82  00000000  00000000  000026f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ef5  00000000  00000000  0000367b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  00004570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f0  00000000  00000000  00004940  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e0e  00000000  00000000  00005130  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00005f3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	ff c0       	rjmp	.+510    	; 0x240 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ea       	ldi	r30, 0xA2	; 162
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 32       	cpi	r26, 0x26	; 38
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e2       	ldi	r26, 0x26	; 38
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 33       	cpi	r26, 0x31	; 49
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	30 d1       	rcall	.+608    	; 0x324 <main>
  c4:	6c c3       	rjmp	.+1752   	; 0x79e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <display_FND>:
		}
	}
}

void display_FND(uint8_t position, uint8_t number)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	2e 97       	sbiw	r28, 0x0e	; 14
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
	uint8_t num[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x67};
  dc:	9a e0       	ldi	r25, 0x0A	; 10
  de:	ec e1       	ldi	r30, 0x1C	; 28
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	de 01       	movw	r26, r28
  e4:	11 96       	adiw	r26, 0x01	; 1
  e6:	01 90       	ld	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	9a 95       	dec	r25
  ec:	e1 f7       	brne	.-8      	; 0xe6 <display_FND+0x1e>
	uint8_t fndselect[] = {0x80,0x40,0x20,0x10};
  ee:	90 e8       	ldi	r25, 0x80	; 128
  f0:	9b 87       	std	Y+11, r25	; 0x0b
  f2:	90 e4       	ldi	r25, 0x40	; 64
  f4:	9c 87       	std	Y+12, r25	; 0x0c
  f6:	90 e2       	ldi	r25, 0x20	; 32
  f8:	9d 87       	std	Y+13, r25	; 0x0d
  fa:	90 e1       	ldi	r25, 0x10	; 16
  fc:	9e 87       	std	Y+14, r25	; 0x0e
	
	PORTC = PORTC|0xf0;
  fe:	95 b3       	in	r25, 0x15	; 21
 100:	90 6f       	ori	r25, 0xF0	; 240
 102:	95 bb       	out	0x15, r25	; 21
	PORTC &= ~fndselect[position];
 104:	95 b3       	in	r25, 0x15	; 21
 106:	fe 01       	movw	r30, r28
 108:	e8 0f       	add	r30, r24
 10a:	f1 1d       	adc	r31, r1
 10c:	83 85       	ldd	r24, Z+11	; 0x0b
 10e:	80 95       	com	r24
 110:	98 23       	and	r25, r24
 112:	95 bb       	out	0x15, r25	; 21
	PORTA = num[number]; 
 114:	e1 e0       	ldi	r30, 0x01	; 1
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	ec 0f       	add	r30, r28
 11a:	fd 1f       	adc	r31, r29
 11c:	e6 0f       	add	r30, r22
 11e:	f1 1d       	adc	r31, r1
 120:	80 81       	ld	r24, Z
 122:	8b bb       	out	0x1b, r24	; 27
}
 124:	2e 96       	adiw	r28, 0x0e	; 14
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	f8 94       	cli
 12a:	de bf       	out	0x3e, r29	; 62
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	cd bf       	out	0x3d, r28	; 61
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <I2C_init>:

//#define START 0x08
//#define SLA_W (0x27<<1)

void I2C_init(unsigned int baud){
	TWBR = baud;
 136:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 13a:	08 95       	ret

0000013c <I2C_start>:
}

void I2C_start(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 13c:	84 ea       	ldi	r24, 0xA4	; 164
 13e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));  // 시작 완료 대기
 142:	e4 e7       	ldi	r30, 0x74	; 116
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	88 23       	and	r24, r24
 14a:	ec f7       	brge	.-6      	; 0x146 <I2C_start+0xa>
}
 14c:	08 95       	ret

0000014e <I2C_transmit>:

void I2C_transmit(uint8_t data)
{
	TWDR = data;
 14e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);
 152:	84 e8       	ldi	r24, 0x84	; 132
 154:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));
 158:	e4 e7       	ldi	r30, 0x74	; 116
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	88 23       	and	r24, r24
 160:	ec f7       	brge	.-6      	; 0x15c <I2C_transmit+0xe>
}
 162:	08 95       	ret

00000164 <I2C_write_byte>:

void I2C_write_byte(uint8_t address, uint8_t data)
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	d8 2f       	mov	r29, r24
 16a:	c6 2f       	mov	r28, r22
	I2C_start();
 16c:	e7 df       	rcall	.-50     	; 0x13c <I2C_start>
	I2C_transmit(address);
 16e:	8d 2f       	mov	r24, r29
 170:	ee df       	rcall	.-36     	; 0x14e <I2C_transmit>
	I2C_transmit(data);
 172:	8c 2f       	mov	r24, r28
 174:	ec df       	rcall	.-40     	; 0x14e <I2C_transmit>
 176:	84 e9       	ldi	r24, 0x94	; 148
	I2C_stop();
}

void I2C_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 178:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 17c:	df 91       	pop	r29
{
	I2C_start();
	I2C_transmit(address);
	I2C_transmit(data);
	I2C_stop();
}
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <I2C_LCD_write_command>:
 182:	ef 92       	push	r14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	ff 92       	push	r15
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	00 d0       	rcall	.+0      	; 0x190 <I2C_LCD_write_command+0xe>
 190:	00 d0       	rcall	.+0      	; 0x192 <I2C_LCD_write_command+0x10>
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	28 2f       	mov	r18, r24
 198:	20 7f       	andi	r18, 0xF0	; 240
 19a:	30 e1       	ldi	r19, 0x10	; 16
 19c:	83 9f       	mul	r24, r19
 19e:	c0 01       	movw	r24, r0
 1a0:	11 24       	eor	r1, r1
 1a2:	92 2f       	mov	r25, r18
 1a4:	9c 60       	ori	r25, 0x0C	; 12
 1a6:	99 83       	std	Y+1, r25	; 0x01
 1a8:	28 60       	ori	r18, 0x08	; 8
 1aa:	2a 83       	std	Y+2, r18	; 0x02
 1ac:	98 2f       	mov	r25, r24
 1ae:	9c 60       	ori	r25, 0x0C	; 12
 1b0:	9b 83       	std	Y+3, r25	; 0x03
 1b2:	88 60       	ori	r24, 0x08	; 8
 1b4:	8c 83       	std	Y+4, r24	; 0x04
 1b6:	8e 01       	movw	r16, r28
 1b8:	0f 5f       	subi	r16, 0xFF	; 255
 1ba:	1f 4f       	sbci	r17, 0xFF	; 255
 1bc:	7e 01       	movw	r14, r28
 1be:	85 e0       	ldi	r24, 0x05	; 5
 1c0:	e8 0e       	add	r14, r24
 1c2:	f1 1c       	adc	r15, r1
 1c4:	f8 01       	movw	r30, r16
 1c6:	61 91       	ld	r22, Z+
 1c8:	8f 01       	movw	r16, r30
 1ca:	8e e4       	ldi	r24, 0x4E	; 78
 1cc:	cb df       	rcall	.-106    	; 0x164 <I2C_write_byte>
 1ce:	0e 15       	cp	r16, r14
 1d0:	1f 05       	cpc	r17, r15
 1d2:	c1 f7       	brne	.-16     	; 0x1c4 <I2C_LCD_write_command+0x42>
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	ff 90       	pop	r15
 1e6:	ef 90       	pop	r14
 1e8:	08 95       	ret

000001ea <I2C_LCD_init>:
	_delay_ms(2);
}

void I2C_LCD_init(void)
{
	I2C_init(10000);
 1ea:	80 e1       	ldi	r24, 0x10	; 16
 1ec:	97 e2       	ldi	r25, 0x27	; 39
 1ee:	a3 df       	rcall	.-186    	; 0x136 <I2C_init>
 1f0:	2f ef       	ldi	r18, 0xFF	; 255
 1f2:	80 e7       	ldi	r24, 0x70	; 112
 1f4:	92 e0       	ldi	r25, 0x02	; 2
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <I2C_LCD_init+0xc>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <I2C_LCD_init+0x16>
 200:	00 00       	nop
	_delay_ms(50);
	//Initialization of HD44780-based LCD (4-bit HW)
	I2C_LCD_write_command(0x33);
 202:	83 e3       	ldi	r24, 0x33	; 51
 204:	be df       	rcall	.-132    	; 0x182 <I2C_LCD_write_command>
	I2C_LCD_write_command(0x32);
 206:	82 e3       	ldi	r24, 0x32	; 50
 208:	bc df       	rcall	.-136    	; 0x182 <I2C_LCD_write_command>
	I2C_LCD_write_command(0x28);   //Function Set 4-bit mode
 20a:	88 e2       	ldi	r24, 0x28	; 40
 20c:	ba df       	rcall	.-140    	; 0x182 <I2C_LCD_write_command>
	I2C_LCD_write_command(0x0c);   //Display On/Off Control
 20e:	8c e0       	ldi	r24, 0x0C	; 12
 210:	b8 df       	rcall	.-144    	; 0x182 <I2C_LCD_write_command>
	I2C_LCD_write_command(0x06);   //Entry mode set
 212:	86 e0       	ldi	r24, 0x06	; 6
 214:	b6 df       	rcall	.-148    	; 0x182 <I2C_LCD_write_command>
 216:	81 e0       	ldi	r24, 0x01	; 1
	I2C_LCD_write_command(0x01);   //Clear Display
 218:	b4 df       	rcall	.-152    	; 0x182 <I2C_LCD_write_command>
 21a:	8f e3       	ldi	r24, 0x3F	; 63
 21c:	9c e9       	ldi	r25, 0x9C	; 156
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <I2C_LCD_init+0x34>
 222:	00 c0       	rjmp	.+0      	; 0x224 <I2C_LCD_init+0x3a>
 224:	00 00       	nop
 226:	08 95       	ret

00000228 <ADC_init>:
 228:	3e 9a       	sbi	0x07, 6	; 7
 22a:	96 b1       	in	r25, 0x06	; 6
	printf("\r\nLight Off\r\n");
	PORTB = 0x00;
	PORTE = 0x00;
	printf("\r\nWindow Stop\r\n");
	_delay_ms(1000);
	PORTB = 0x00;
 22c:	97 60       	ori	r25, 0x07	; 7
 22e:	96 b9       	out	0x06, r25	; 6
 230:	37 9a       	sbi	0x06, 7	; 6
 232:	35 9a       	sbi	0x06, 5	; 6
 234:	97 b1       	in	r25, 0x07	; 7
 236:	90 7e       	andi	r25, 0xE0	; 224
 238:	89 2b       	or	r24, r25
 23a:	87 b9       	out	0x07, r24	; 7
 23c:	36 9a       	sbi	0x06, 6	; 6
 23e:	08 95       	ret

00000240 <__vector_16>:
}

ISR(TIMER0_OVF_vect)
{
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	0b b6       	in	r0, 0x3b	; 59
 24c:	0f 92       	push	r0
 24e:	2f 93       	push	r18
 250:	3f 93       	push	r19
 252:	4f 93       	push	r20
 254:	5f 93       	push	r21
 256:	6f 93       	push	r22
 258:	7f 93       	push	r23
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	af 93       	push	r26
 260:	bf 93       	push	r27
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
	if (timercounter0%4 == 0)
 266:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 26a:	83 70       	andi	r24, 0x03	; 3
 26c:	59 f4       	brne	.+22     	; 0x284 <__vector_16+0x44>
	{
		display_FND(0,count%10); //count%10
 26e:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <count>
 272:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <count+0x1>
 276:	6a e0       	ldi	r22, 0x0A	; 10
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	6a d2       	rcall	.+1236   	; 0x750 <__divmodhi4>
 27c:	68 2f       	mov	r22, r24
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	23 df       	rcall	.-442    	; 0xc8 <display_FND>
 282:	32 c0       	rjmp	.+100    	; 0x2e8 <__vector_16+0xa8>
	}
	else if (timercounter0%4 == 1)
 284:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 288:	83 70       	andi	r24, 0x03	; 3
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	69 f4       	brne	.+26     	; 0x2a8 <__vector_16+0x68>
	{
		display_FND(1,count%100/10); //count%100/10
 28e:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <count>
 292:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <count+0x1>
 296:	64 e6       	ldi	r22, 0x64	; 100
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	5a d2       	rcall	.+1204   	; 0x750 <__divmodhi4>
 29c:	6a e0       	ldi	r22, 0x0A	; 10
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	57 d2       	rcall	.+1198   	; 0x750 <__divmodhi4>
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	11 df       	rcall	.-478    	; 0xc8 <display_FND>
 2a6:	20 c0       	rjmp	.+64     	; 0x2e8 <__vector_16+0xa8>
	}
	else if (timercounter0%4 == 2)
 2a8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 2ac:	83 70       	andi	r24, 0x03	; 3
 2ae:	82 30       	cpi	r24, 0x02	; 2
 2b0:	69 f4       	brne	.+26     	; 0x2cc <__vector_16+0x8c>
	{
		display_FND(2,count%1000/100); //count%1000/100
 2b2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <count>
 2b6:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <count+0x1>
 2ba:	68 ee       	ldi	r22, 0xE8	; 232
 2bc:	73 e0       	ldi	r23, 0x03	; 3
 2be:	48 d2       	rcall	.+1168   	; 0x750 <__divmodhi4>
 2c0:	64 e6       	ldi	r22, 0x64	; 100
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	45 d2       	rcall	.+1162   	; 0x750 <__divmodhi4>
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	ff de       	rcall	.-514    	; 0xc8 <display_FND>
 2ca:	0e c0       	rjmp	.+28     	; 0x2e8 <__vector_16+0xa8>
	}
	else if (timercounter0%4 == 3)
 2cc:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 2d0:	83 70       	andi	r24, 0x03	; 3
 2d2:	83 30       	cpi	r24, 0x03	; 3
	{
		display_FND(3,count/1000); //count/1000
 2d4:	49 f4       	brne	.+18     	; 0x2e8 <__vector_16+0xa8>
 2d6:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <count>
 2da:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <count+0x1>
 2de:	68 ee       	ldi	r22, 0xE8	; 232
 2e0:	73 e0       	ldi	r23, 0x03	; 3
 2e2:	36 d2       	rcall	.+1132   	; 0x750 <__divmodhi4>
 2e4:	83 e0       	ldi	r24, 0x03	; 3
 2e6:	f0 de       	rcall	.-544    	; 0xc8 <display_FND>
	}
	timercounter0++;
 2e8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
 2ee:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
	if (timercounter0 >= 200)
 2f2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 2f6:	88 3c       	cpi	r24, 0xC8	; 200
 2f8:	10 f0       	brcs	.+4      	; 0x2fe <__vector_16+0xbe>
	{
		timercounter0 = 0;
 2fa:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
	}
}
 2fe:	ff 91       	pop	r31
 300:	ef 91       	pop	r30
 302:	bf 91       	pop	r27
 304:	af 91       	pop	r26
 306:	9f 91       	pop	r25
 308:	8f 91       	pop	r24
 30a:	7f 91       	pop	r23
 30c:	6f 91       	pop	r22
 30e:	5f 91       	pop	r21
 310:	4f 91       	pop	r20
 312:	3f 91       	pop	r19
 314:	2f 91       	pop	r18
 316:	0f 90       	pop	r0
 318:	0b be       	out	0x3b, r0	; 59
 31a:	0f 90       	pop	r0
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	0f 90       	pop	r0
 320:	1f 90       	pop	r1
 322:	18 95       	reti

00000324 <main>:
	
	uint8_t distance;
	
	struct state_light NOW_LIGHTSTS;
	
	stdout = &OUTPUT;
 324:	eb e2       	ldi	r30, 0x2B	; 43
 326:	f1 e0       	ldi	r31, 0x01	; 1
 328:	8e e0       	ldi	r24, 0x0E	; 14
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	93 83       	std	Z+3, r25	; 0x03
 32e:	82 83       	std	Z+2, r24	; 0x02
	stdin = &INPUT;
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	91 83       	std	Z+1, r25	; 0x01
 336:	80 83       	st	Z, r24
	
	UART0_init();
 338:	71 d0       	rcall	.+226    	; 0x41c <UART0_init>
	ADC_init(0);
 33a:	80 e0       	ldi	r24, 0x00	; 0
	I2C_LCD_init();
 33c:	75 df       	rcall	.-278    	; 0x228 <ADC_init>
 33e:	55 df       	rcall	.-342    	; 0x1ea <I2C_LCD_init>
	Sono_Timer_init();
 340:	1e d0       	rcall	.+60     	; 0x37e <Sono_Timer_init>
 342:	8f ef       	ldi	r24, 0xFF	; 255
	
	NOW_LIGHTSTS.states1 = LightONWinSTOP;
	
	DDRB = 0xff;
 344:	87 bb       	out	0x17, r24	; 23
 346:	82 b9       	out	0x02, r24	; 2
	DDRE = 0xff;
 348:	e4 e6       	ldi	r30, 0x64	; 100
	DDRG |= 0x10;
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	90 81       	ld	r25, Z
 34e:	90 61       	ori	r25, 0x10	; 16
 350:	90 83       	st	Z, r25
 352:	90 81       	ld	r25, Z
	DDRG &= ~0x08;
 354:	97 7f       	andi	r25, 0xF7	; 247
 356:	90 83       	st	Z, r25
 358:	8a bb       	out	0x1a, r24	; 26
	DDRA = 0xff;
 35a:	80 ef       	ldi	r24, 0xF0	; 240
	DDRC = 0xf0;
 35c:	84 bb       	out	0x14, r24	; 20
 35e:	18 ba       	out	0x18, r1	; 24
	
	PORTB = 0x00;
 360:	13 b8       	out	0x03, r1	; 3
	PORTE = 0x00;
 362:	83 b7       	in	r24, 0x33	; 51
	
	TCCR0 |= (1<<CS02) | ( 0<<CS01) | (0<<CS00);
 364:	84 60       	ori	r24, 0x04	; 4
 366:	83 bf       	out	0x33, r24	; 51
 368:	87 b7       	in	r24, 0x37	; 55
	TIMSK |= (1<<TOIE0);
 36a:	81 60       	ori	r24, 0x01	; 1
 36c:	87 bf       	out	0x37, r24	; 55
	
	sei();
 36e:	78 94       	sei
	
	//PORTC = 0xf0;
	while (1) 
    {
		distance = measure_distance();
 370:	0a d0       	rcall	.+20     	; 0x386 <measure_distance>
 372:	90 e0       	ldi	r25, 0x00	; 0
		
		//Seg_display();
		
		count = distance;
 374:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <count+0x1>
 378:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <count>
 37c:	f9 cf       	rjmp	.-14     	; 0x370 <main+0x4c>

0000037e <Sono_Timer_init>:
#include <stdio.h>
#include "Sono.h"

void Sono_Timer_init(void)
{
	TCCR1B |= (1<<CS12) | (1<<CS10);
 37e:	8e b5       	in	r24, 0x2e	; 46
 380:	85 60       	ori	r24, 0x05	; 5
 382:	8e bd       	out	0x2e, r24	; 46
 384:	08 95       	ret

00000386 <measure_distance>:
}

uint8_t measure_distance(void)
{
	PORTG &= ~0x10;
 386:	e5 e6       	ldi	r30, 0x65	; 101
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	8f 7e       	andi	r24, 0xEF	; 239
 38e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 390:	85 e0       	ldi	r24, 0x05	; 5
 392:	8a 95       	dec	r24
 394:	f1 f7       	brne	.-4      	; 0x392 <measure_distance+0xc>
 396:	00 00       	nop
	_delay_us(1);
	PORTG |= 0x10;
 398:	80 81       	ld	r24, Z
 39a:	80 61       	ori	r24, 0x10	; 16
 39c:	80 83       	st	Z, r24
 39e:	95 e3       	ldi	r25, 0x35	; 53
 3a0:	9a 95       	dec	r25
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <measure_distance+0x1a>
 3a4:	00 00       	nop
	_delay_us(10);
	PORTG &= ~0x10;
 3a6:	80 81       	ld	r24, Z
 3a8:	8f 7e       	andi	r24, 0xEF	; 239
 3aa:	80 83       	st	Z, r24
	
	TCNT1 = 0;
 3ac:	1d bc       	out	0x2d, r1	; 45
 3ae:	1c bc       	out	0x2c, r1	; 44
	while(!(PING & 0x08))
 3b0:	e3 e6       	ldi	r30, 0x63	; 99
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	05 c0       	rjmp	.+10     	; 0x3c0 <measure_distance+0x3a>
		if (TCNT1 > 65000) return 0;
 3b6:	2c b5       	in	r18, 0x2c	; 44
 3b8:	3d b5       	in	r19, 0x2d	; 45
 3ba:	29 3e       	cpi	r18, 0xE9	; 233
 3bc:	3d 4f       	sbci	r19, 0xFD	; 253
 3be:	68 f5       	brcc	.+90     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	PORTG |= 0x10;
	_delay_us(10);
	PORTG &= ~0x10;
	
	TCNT1 = 0;
	while(!(PING & 0x08))
 3c0:	90 81       	ld	r25, Z
 3c2:	89 2f       	mov	r24, r25
 3c4:	88 70       	andi	r24, 0x08	; 8
 3c6:	93 ff       	sbrs	r25, 3
 3c8:	f6 cf       	rjmp	.-20     	; 0x3b6 <measure_distance+0x30>
		if (TCNT1 > 65000) return 0;
		
	TCNT1 = 0;
 3ca:	1d bc       	out	0x2d, r1	; 45
 3cc:	1c bc       	out	0x2c, r1	; 44
	while(PING & 0x08)
 3ce:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
 3d2:	83 ff       	sbrs	r24, 3
 3d4:	07 c0       	rjmp	.+14     	; 0x3e4 <measure_distance+0x5e>
 3d6:	e3 e6       	ldi	r30, 0x63	; 99
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
	{
		if (TCNT1 > 650000)
 3da:	8c b5       	in	r24, 0x2c	; 44
 3dc:	9d b5       	in	r25, 0x2d	; 45
	TCNT1 = 0;
	while(!(PING & 0x08))
		if (TCNT1 > 65000) return 0;
		
	TCNT1 = 0;
	while(PING & 0x08)
 3de:	80 81       	ld	r24, Z
 3e0:	83 fd       	sbrc	r24, 3
 3e2:	fb cf       	rjmp	.-10     	; 0x3da <measure_distance+0x54>
			TCNT1 = 0;
			break;
		}
	}
	
	double pulse_width = 1000000.0 * TCNT1 * PRESCALER / F_CPU;
 3e4:	6c b5       	in	r22, 0x2c	; 44
 3e6:	7d b5       	in	r23, 0x2d	; 45
	
	return pulse_width / 58;
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	c0 d0       	rcall	.+384    	; 0x56e <__floatunsisf>
 3ee:	20 e0       	ldi	r18, 0x00	; 0
 3f0:	34 e2       	ldi	r19, 0x24	; 36
 3f2:	44 e7       	ldi	r20, 0x74	; 116
 3f4:	59 e4       	ldi	r21, 0x49	; 73
 3f6:	49 d1       	rcall	.+658    	; 0x68a <__mulsf3>
 3f8:	20 e0       	ldi	r18, 0x00	; 0
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	40 e8       	ldi	r20, 0x80	; 128
 3fe:	54 e4       	ldi	r21, 0x44	; 68
 400:	44 d1       	rcall	.+648    	; 0x68a <__mulsf3>
 402:	20 e0       	ldi	r18, 0x00	; 0
 404:	34 e2       	ldi	r19, 0x24	; 36
 406:	44 e7       	ldi	r20, 0x74	; 116
 408:	5b e4       	ldi	r21, 0x4B	; 75
 40a:	1d d0       	rcall	.+58     	; 0x446 <__divsf3>
 40c:	20 e0       	ldi	r18, 0x00	; 0
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	48 e6       	ldi	r20, 0x68	; 104
 412:	52 e4       	ldi	r21, 0x42	; 66
 414:	18 d0       	rcall	.+48     	; 0x446 <__divsf3>
 416:	7f d0       	rcall	.+254    	; 0x516 <__fixunssfsi>
 418:	86 2f       	mov	r24, r22
}
 41a:	08 95       	ret

0000041c <UART0_init>:
 */ 
#include <avr/io.h>

void UART0_init(void)
{
	UBRR0H = 0x00;			// 9600 보율로 설정
 41c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;
 420:	8f ec       	ldi	r24, 0xCF	; 207
 422:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A |= (1<<U2X0);			// 2배속 모드
 424:	59 9a       	sbi	0x0b, 1	; 11
	// 비동기, 8비트 데이터, 패리티 없음, 1비트 정지 비트 모드
	UCSR0C |= 0x06;
 426:	e5 e9       	ldi	r30, 0x95	; 149
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	86 60       	ori	r24, 0x06	; 6
 42e:	80 83       	st	Z, r24
	
	UCSR0B |= (1<<RXEN0);		// 송수신 가능
 430:	54 9a       	sbi	0x0a, 4	; 10
	UCSR0B |= (1<<TXEN0);
 432:	53 9a       	sbi	0x0a, 3	; 10
 434:	08 95       	ret

00000436 <UART0_transmit>:
}

void UART0_transmit(char data)
{
	while( !(UCSR0A & (1 << UDRE0)) );	// 송신 가능 대기
 436:	5d 9b       	sbis	0x0b, 5	; 11
 438:	fe cf       	rjmp	.-4      	; 0x436 <UART0_transmit>
	UDR0 = data;				// 데이터 전송
 43a:	8c b9       	out	0x0c, r24	; 12
 43c:	08 95       	ret

0000043e <UART0_receive>:
}

unsigned char UART0_receive(void)
{
	while( !(UCSR0A & (1<<RXC0)) );	// 데이터 수신 대기
 43e:	5f 9b       	sbis	0x0b, 7	; 11
 440:	fe cf       	rjmp	.-4      	; 0x43e <UART0_receive>
	return UDR0;
 442:	8c b1       	in	r24, 0x0c	; 12
}
 444:	08 95       	ret

00000446 <__divsf3>:
 446:	0c d0       	rcall	.+24     	; 0x460 <__divsf3x>
 448:	e6 c0       	rjmp	.+460    	; 0x616 <__fp_round>
 44a:	de d0       	rcall	.+444    	; 0x608 <__fp_pscB>
 44c:	40 f0       	brcs	.+16     	; 0x45e <__divsf3+0x18>
 44e:	d5 d0       	rcall	.+426    	; 0x5fa <__fp_pscA>
 450:	30 f0       	brcs	.+12     	; 0x45e <__divsf3+0x18>
 452:	21 f4       	brne	.+8      	; 0x45c <__divsf3+0x16>
 454:	5f 3f       	cpi	r21, 0xFF	; 255
 456:	19 f0       	breq	.+6      	; 0x45e <__divsf3+0x18>
 458:	c7 c0       	rjmp	.+398    	; 0x5e8 <__fp_inf>
 45a:	51 11       	cpse	r21, r1
 45c:	10 c1       	rjmp	.+544    	; 0x67e <__fp_szero>
 45e:	ca c0       	rjmp	.+404    	; 0x5f4 <__fp_nan>

00000460 <__divsf3x>:
 460:	eb d0       	rcall	.+470    	; 0x638 <__fp_split3>
 462:	98 f3       	brcs	.-26     	; 0x44a <__divsf3+0x4>

00000464 <__divsf3_pse>:
 464:	99 23       	and	r25, r25
 466:	c9 f3       	breq	.-14     	; 0x45a <__divsf3+0x14>
 468:	55 23       	and	r21, r21
 46a:	b1 f3       	breq	.-20     	; 0x458 <__divsf3+0x12>
 46c:	95 1b       	sub	r25, r21
 46e:	55 0b       	sbc	r21, r21
 470:	bb 27       	eor	r27, r27
 472:	aa 27       	eor	r26, r26
 474:	62 17       	cp	r22, r18
 476:	73 07       	cpc	r23, r19
 478:	84 07       	cpc	r24, r20
 47a:	38 f0       	brcs	.+14     	; 0x48a <__divsf3_pse+0x26>
 47c:	9f 5f       	subi	r25, 0xFF	; 255
 47e:	5f 4f       	sbci	r21, 0xFF	; 255
 480:	22 0f       	add	r18, r18
 482:	33 1f       	adc	r19, r19
 484:	44 1f       	adc	r20, r20
 486:	aa 1f       	adc	r26, r26
 488:	a9 f3       	breq	.-22     	; 0x474 <__divsf3_pse+0x10>
 48a:	33 d0       	rcall	.+102    	; 0x4f2 <__divsf3_pse+0x8e>
 48c:	0e 2e       	mov	r0, r30
 48e:	3a f0       	brmi	.+14     	; 0x49e <__divsf3_pse+0x3a>
 490:	e0 e8       	ldi	r30, 0x80	; 128
 492:	30 d0       	rcall	.+96     	; 0x4f4 <__divsf3_pse+0x90>
 494:	91 50       	subi	r25, 0x01	; 1
 496:	50 40       	sbci	r21, 0x00	; 0
 498:	e6 95       	lsr	r30
 49a:	00 1c       	adc	r0, r0
 49c:	ca f7       	brpl	.-14     	; 0x490 <__divsf3_pse+0x2c>
 49e:	29 d0       	rcall	.+82     	; 0x4f2 <__divsf3_pse+0x8e>
 4a0:	fe 2f       	mov	r31, r30
 4a2:	27 d0       	rcall	.+78     	; 0x4f2 <__divsf3_pse+0x8e>
 4a4:	66 0f       	add	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	88 1f       	adc	r24, r24
 4aa:	bb 1f       	adc	r27, r27
 4ac:	26 17       	cp	r18, r22
 4ae:	37 07       	cpc	r19, r23
 4b0:	48 07       	cpc	r20, r24
 4b2:	ab 07       	cpc	r26, r27
 4b4:	b0 e8       	ldi	r27, 0x80	; 128
 4b6:	09 f0       	breq	.+2      	; 0x4ba <__divsf3_pse+0x56>
 4b8:	bb 0b       	sbc	r27, r27
 4ba:	80 2d       	mov	r24, r0
 4bc:	bf 01       	movw	r22, r30
 4be:	ff 27       	eor	r31, r31
 4c0:	93 58       	subi	r25, 0x83	; 131
 4c2:	5f 4f       	sbci	r21, 0xFF	; 255
 4c4:	2a f0       	brmi	.+10     	; 0x4d0 <__divsf3_pse+0x6c>
 4c6:	9e 3f       	cpi	r25, 0xFE	; 254
 4c8:	51 05       	cpc	r21, r1
 4ca:	68 f0       	brcs	.+26     	; 0x4e6 <__divsf3_pse+0x82>
 4cc:	8d c0       	rjmp	.+282    	; 0x5e8 <__fp_inf>
 4ce:	d7 c0       	rjmp	.+430    	; 0x67e <__fp_szero>
 4d0:	5f 3f       	cpi	r21, 0xFF	; 255
 4d2:	ec f3       	brlt	.-6      	; 0x4ce <__divsf3_pse+0x6a>
 4d4:	98 3e       	cpi	r25, 0xE8	; 232
 4d6:	dc f3       	brlt	.-10     	; 0x4ce <__divsf3_pse+0x6a>
 4d8:	86 95       	lsr	r24
 4da:	77 95       	ror	r23
 4dc:	67 95       	ror	r22
 4de:	b7 95       	ror	r27
 4e0:	f7 95       	ror	r31
 4e2:	9f 5f       	subi	r25, 0xFF	; 255
 4e4:	c9 f7       	brne	.-14     	; 0x4d8 <__divsf3_pse+0x74>
 4e6:	88 0f       	add	r24, r24
 4e8:	91 1d       	adc	r25, r1
 4ea:	96 95       	lsr	r25
 4ec:	87 95       	ror	r24
 4ee:	97 f9       	bld	r25, 7
 4f0:	08 95       	ret
 4f2:	e1 e0       	ldi	r30, 0x01	; 1
 4f4:	66 0f       	add	r22, r22
 4f6:	77 1f       	adc	r23, r23
 4f8:	88 1f       	adc	r24, r24
 4fa:	bb 1f       	adc	r27, r27
 4fc:	62 17       	cp	r22, r18
 4fe:	73 07       	cpc	r23, r19
 500:	84 07       	cpc	r24, r20
 502:	ba 07       	cpc	r27, r26
 504:	20 f0       	brcs	.+8      	; 0x50e <__divsf3_pse+0xaa>
 506:	62 1b       	sub	r22, r18
 508:	73 0b       	sbc	r23, r19
 50a:	84 0b       	sbc	r24, r20
 50c:	ba 0b       	sbc	r27, r26
 50e:	ee 1f       	adc	r30, r30
 510:	88 f7       	brcc	.-30     	; 0x4f4 <__divsf3_pse+0x90>
 512:	e0 95       	com	r30
 514:	08 95       	ret

00000516 <__fixunssfsi>:
 516:	98 d0       	rcall	.+304    	; 0x648 <__fp_splitA>
 518:	88 f0       	brcs	.+34     	; 0x53c <__fixunssfsi+0x26>
 51a:	9f 57       	subi	r25, 0x7F	; 127
 51c:	90 f0       	brcs	.+36     	; 0x542 <__fixunssfsi+0x2c>
 51e:	b9 2f       	mov	r27, r25
 520:	99 27       	eor	r25, r25
 522:	b7 51       	subi	r27, 0x17	; 23
 524:	a0 f0       	brcs	.+40     	; 0x54e <__fixunssfsi+0x38>
 526:	d1 f0       	breq	.+52     	; 0x55c <__fixunssfsi+0x46>
 528:	66 0f       	add	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	88 1f       	adc	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	1a f0       	brmi	.+6      	; 0x538 <__fixunssfsi+0x22>
 532:	ba 95       	dec	r27
 534:	c9 f7       	brne	.-14     	; 0x528 <__fixunssfsi+0x12>
 536:	12 c0       	rjmp	.+36     	; 0x55c <__fixunssfsi+0x46>
 538:	b1 30       	cpi	r27, 0x01	; 1
 53a:	81 f0       	breq	.+32     	; 0x55c <__fixunssfsi+0x46>
 53c:	9f d0       	rcall	.+318    	; 0x67c <__fp_zero>
 53e:	b1 e0       	ldi	r27, 0x01	; 1
 540:	08 95       	ret
 542:	9c c0       	rjmp	.+312    	; 0x67c <__fp_zero>
 544:	67 2f       	mov	r22, r23
 546:	78 2f       	mov	r23, r24
 548:	88 27       	eor	r24, r24
 54a:	b8 5f       	subi	r27, 0xF8	; 248
 54c:	39 f0       	breq	.+14     	; 0x55c <__fixunssfsi+0x46>
 54e:	b9 3f       	cpi	r27, 0xF9	; 249
 550:	cc f3       	brlt	.-14     	; 0x544 <__fixunssfsi+0x2e>
 552:	86 95       	lsr	r24
 554:	77 95       	ror	r23
 556:	67 95       	ror	r22
 558:	b3 95       	inc	r27
 55a:	d9 f7       	brne	.-10     	; 0x552 <__fixunssfsi+0x3c>
 55c:	3e f4       	brtc	.+14     	; 0x56c <__fixunssfsi+0x56>
 55e:	90 95       	com	r25
 560:	80 95       	com	r24
 562:	70 95       	com	r23
 564:	61 95       	neg	r22
 566:	7f 4f       	sbci	r23, 0xFF	; 255
 568:	8f 4f       	sbci	r24, 0xFF	; 255
 56a:	9f 4f       	sbci	r25, 0xFF	; 255
 56c:	08 95       	ret

0000056e <__floatunsisf>:
 56e:	e8 94       	clt
 570:	09 c0       	rjmp	.+18     	; 0x584 <__floatsisf+0x12>

00000572 <__floatsisf>:
 572:	97 fb       	bst	r25, 7
 574:	3e f4       	brtc	.+14     	; 0x584 <__floatsisf+0x12>
 576:	90 95       	com	r25
 578:	80 95       	com	r24
 57a:	70 95       	com	r23
 57c:	61 95       	neg	r22
 57e:	7f 4f       	sbci	r23, 0xFF	; 255
 580:	8f 4f       	sbci	r24, 0xFF	; 255
 582:	9f 4f       	sbci	r25, 0xFF	; 255
 584:	99 23       	and	r25, r25
 586:	a9 f0       	breq	.+42     	; 0x5b2 <__floatsisf+0x40>
 588:	f9 2f       	mov	r31, r25
 58a:	96 e9       	ldi	r25, 0x96	; 150
 58c:	bb 27       	eor	r27, r27
 58e:	93 95       	inc	r25
 590:	f6 95       	lsr	r31
 592:	87 95       	ror	r24
 594:	77 95       	ror	r23
 596:	67 95       	ror	r22
 598:	b7 95       	ror	r27
 59a:	f1 11       	cpse	r31, r1
 59c:	f8 cf       	rjmp	.-16     	; 0x58e <__floatsisf+0x1c>
 59e:	fa f4       	brpl	.+62     	; 0x5de <__floatsisf+0x6c>
 5a0:	bb 0f       	add	r27, r27
 5a2:	11 f4       	brne	.+4      	; 0x5a8 <__floatsisf+0x36>
 5a4:	60 ff       	sbrs	r22, 0
 5a6:	1b c0       	rjmp	.+54     	; 0x5de <__floatsisf+0x6c>
 5a8:	6f 5f       	subi	r22, 0xFF	; 255
 5aa:	7f 4f       	sbci	r23, 0xFF	; 255
 5ac:	8f 4f       	sbci	r24, 0xFF	; 255
 5ae:	9f 4f       	sbci	r25, 0xFF	; 255
 5b0:	16 c0       	rjmp	.+44     	; 0x5de <__floatsisf+0x6c>
 5b2:	88 23       	and	r24, r24
 5b4:	11 f0       	breq	.+4      	; 0x5ba <__floatsisf+0x48>
 5b6:	96 e9       	ldi	r25, 0x96	; 150
 5b8:	11 c0       	rjmp	.+34     	; 0x5dc <__floatsisf+0x6a>
 5ba:	77 23       	and	r23, r23
 5bc:	21 f0       	breq	.+8      	; 0x5c6 <__floatsisf+0x54>
 5be:	9e e8       	ldi	r25, 0x8E	; 142
 5c0:	87 2f       	mov	r24, r23
 5c2:	76 2f       	mov	r23, r22
 5c4:	05 c0       	rjmp	.+10     	; 0x5d0 <__floatsisf+0x5e>
 5c6:	66 23       	and	r22, r22
 5c8:	71 f0       	breq	.+28     	; 0x5e6 <__floatsisf+0x74>
 5ca:	96 e8       	ldi	r25, 0x86	; 134
 5cc:	86 2f       	mov	r24, r22
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	60 e0       	ldi	r22, 0x00	; 0
 5d2:	2a f0       	brmi	.+10     	; 0x5de <__floatsisf+0x6c>
 5d4:	9a 95       	dec	r25
 5d6:	66 0f       	add	r22, r22
 5d8:	77 1f       	adc	r23, r23
 5da:	88 1f       	adc	r24, r24
 5dc:	da f7       	brpl	.-10     	; 0x5d4 <__floatsisf+0x62>
 5de:	88 0f       	add	r24, r24
 5e0:	96 95       	lsr	r25
 5e2:	87 95       	ror	r24
 5e4:	97 f9       	bld	r25, 7
 5e6:	08 95       	ret

000005e8 <__fp_inf>:
 5e8:	97 f9       	bld	r25, 7
 5ea:	9f 67       	ori	r25, 0x7F	; 127
 5ec:	80 e8       	ldi	r24, 0x80	; 128
 5ee:	70 e0       	ldi	r23, 0x00	; 0
 5f0:	60 e0       	ldi	r22, 0x00	; 0
 5f2:	08 95       	ret

000005f4 <__fp_nan>:
 5f4:	9f ef       	ldi	r25, 0xFF	; 255
 5f6:	80 ec       	ldi	r24, 0xC0	; 192
 5f8:	08 95       	ret

000005fa <__fp_pscA>:
 5fa:	00 24       	eor	r0, r0
 5fc:	0a 94       	dec	r0
 5fe:	16 16       	cp	r1, r22
 600:	17 06       	cpc	r1, r23
 602:	18 06       	cpc	r1, r24
 604:	09 06       	cpc	r0, r25
 606:	08 95       	ret

00000608 <__fp_pscB>:
 608:	00 24       	eor	r0, r0
 60a:	0a 94       	dec	r0
 60c:	12 16       	cp	r1, r18
 60e:	13 06       	cpc	r1, r19
 610:	14 06       	cpc	r1, r20
 612:	05 06       	cpc	r0, r21
 614:	08 95       	ret

00000616 <__fp_round>:
 616:	09 2e       	mov	r0, r25
 618:	03 94       	inc	r0
 61a:	00 0c       	add	r0, r0
 61c:	11 f4       	brne	.+4      	; 0x622 <__fp_round+0xc>
 61e:	88 23       	and	r24, r24
 620:	52 f0       	brmi	.+20     	; 0x636 <__fp_round+0x20>
 622:	bb 0f       	add	r27, r27
 624:	40 f4       	brcc	.+16     	; 0x636 <__fp_round+0x20>
 626:	bf 2b       	or	r27, r31
 628:	11 f4       	brne	.+4      	; 0x62e <__fp_round+0x18>
 62a:	60 ff       	sbrs	r22, 0
 62c:	04 c0       	rjmp	.+8      	; 0x636 <__fp_round+0x20>
 62e:	6f 5f       	subi	r22, 0xFF	; 255
 630:	7f 4f       	sbci	r23, 0xFF	; 255
 632:	8f 4f       	sbci	r24, 0xFF	; 255
 634:	9f 4f       	sbci	r25, 0xFF	; 255
 636:	08 95       	ret

00000638 <__fp_split3>:
 638:	57 fd       	sbrc	r21, 7
 63a:	90 58       	subi	r25, 0x80	; 128
 63c:	44 0f       	add	r20, r20
 63e:	55 1f       	adc	r21, r21
 640:	59 f0       	breq	.+22     	; 0x658 <__fp_splitA+0x10>
 642:	5f 3f       	cpi	r21, 0xFF	; 255
 644:	71 f0       	breq	.+28     	; 0x662 <__fp_splitA+0x1a>
 646:	47 95       	ror	r20

00000648 <__fp_splitA>:
 648:	88 0f       	add	r24, r24
 64a:	97 fb       	bst	r25, 7
 64c:	99 1f       	adc	r25, r25
 64e:	61 f0       	breq	.+24     	; 0x668 <__fp_splitA+0x20>
 650:	9f 3f       	cpi	r25, 0xFF	; 255
 652:	79 f0       	breq	.+30     	; 0x672 <__fp_splitA+0x2a>
 654:	87 95       	ror	r24
 656:	08 95       	ret
 658:	12 16       	cp	r1, r18
 65a:	13 06       	cpc	r1, r19
 65c:	14 06       	cpc	r1, r20
 65e:	55 1f       	adc	r21, r21
 660:	f2 cf       	rjmp	.-28     	; 0x646 <__fp_split3+0xe>
 662:	46 95       	lsr	r20
 664:	f1 df       	rcall	.-30     	; 0x648 <__fp_splitA>
 666:	08 c0       	rjmp	.+16     	; 0x678 <__fp_splitA+0x30>
 668:	16 16       	cp	r1, r22
 66a:	17 06       	cpc	r1, r23
 66c:	18 06       	cpc	r1, r24
 66e:	99 1f       	adc	r25, r25
 670:	f1 cf       	rjmp	.-30     	; 0x654 <__fp_splitA+0xc>
 672:	86 95       	lsr	r24
 674:	71 05       	cpc	r23, r1
 676:	61 05       	cpc	r22, r1
 678:	08 94       	sec
 67a:	08 95       	ret

0000067c <__fp_zero>:
 67c:	e8 94       	clt

0000067e <__fp_szero>:
 67e:	bb 27       	eor	r27, r27
 680:	66 27       	eor	r22, r22
 682:	77 27       	eor	r23, r23
 684:	cb 01       	movw	r24, r22
 686:	97 f9       	bld	r25, 7
 688:	08 95       	ret

0000068a <__mulsf3>:
 68a:	0b d0       	rcall	.+22     	; 0x6a2 <__mulsf3x>
 68c:	c4 cf       	rjmp	.-120    	; 0x616 <__fp_round>
 68e:	b5 df       	rcall	.-150    	; 0x5fa <__fp_pscA>
 690:	28 f0       	brcs	.+10     	; 0x69c <__mulsf3+0x12>
 692:	ba df       	rcall	.-140    	; 0x608 <__fp_pscB>
 694:	18 f0       	brcs	.+6      	; 0x69c <__mulsf3+0x12>
 696:	95 23       	and	r25, r21
 698:	09 f0       	breq	.+2      	; 0x69c <__mulsf3+0x12>
 69a:	a6 cf       	rjmp	.-180    	; 0x5e8 <__fp_inf>
 69c:	ab cf       	rjmp	.-170    	; 0x5f4 <__fp_nan>
 69e:	11 24       	eor	r1, r1
 6a0:	ee cf       	rjmp	.-36     	; 0x67e <__fp_szero>

000006a2 <__mulsf3x>:
 6a2:	ca df       	rcall	.-108    	; 0x638 <__fp_split3>
 6a4:	a0 f3       	brcs	.-24     	; 0x68e <__mulsf3+0x4>

000006a6 <__mulsf3_pse>:
 6a6:	95 9f       	mul	r25, r21
 6a8:	d1 f3       	breq	.-12     	; 0x69e <__mulsf3+0x14>
 6aa:	95 0f       	add	r25, r21
 6ac:	50 e0       	ldi	r21, 0x00	; 0
 6ae:	55 1f       	adc	r21, r21
 6b0:	62 9f       	mul	r22, r18
 6b2:	f0 01       	movw	r30, r0
 6b4:	72 9f       	mul	r23, r18
 6b6:	bb 27       	eor	r27, r27
 6b8:	f0 0d       	add	r31, r0
 6ba:	b1 1d       	adc	r27, r1
 6bc:	63 9f       	mul	r22, r19
 6be:	aa 27       	eor	r26, r26
 6c0:	f0 0d       	add	r31, r0
 6c2:	b1 1d       	adc	r27, r1
 6c4:	aa 1f       	adc	r26, r26
 6c6:	64 9f       	mul	r22, r20
 6c8:	66 27       	eor	r22, r22
 6ca:	b0 0d       	add	r27, r0
 6cc:	a1 1d       	adc	r26, r1
 6ce:	66 1f       	adc	r22, r22
 6d0:	82 9f       	mul	r24, r18
 6d2:	22 27       	eor	r18, r18
 6d4:	b0 0d       	add	r27, r0
 6d6:	a1 1d       	adc	r26, r1
 6d8:	62 1f       	adc	r22, r18
 6da:	73 9f       	mul	r23, r19
 6dc:	b0 0d       	add	r27, r0
 6de:	a1 1d       	adc	r26, r1
 6e0:	62 1f       	adc	r22, r18
 6e2:	83 9f       	mul	r24, r19
 6e4:	a0 0d       	add	r26, r0
 6e6:	61 1d       	adc	r22, r1
 6e8:	22 1f       	adc	r18, r18
 6ea:	74 9f       	mul	r23, r20
 6ec:	33 27       	eor	r19, r19
 6ee:	a0 0d       	add	r26, r0
 6f0:	61 1d       	adc	r22, r1
 6f2:	23 1f       	adc	r18, r19
 6f4:	84 9f       	mul	r24, r20
 6f6:	60 0d       	add	r22, r0
 6f8:	21 1d       	adc	r18, r1
 6fa:	82 2f       	mov	r24, r18
 6fc:	76 2f       	mov	r23, r22
 6fe:	6a 2f       	mov	r22, r26
 700:	11 24       	eor	r1, r1
 702:	9f 57       	subi	r25, 0x7F	; 127
 704:	50 40       	sbci	r21, 0x00	; 0
 706:	8a f0       	brmi	.+34     	; 0x72a <__mulsf3_pse+0x84>
 708:	e1 f0       	breq	.+56     	; 0x742 <__mulsf3_pse+0x9c>
 70a:	88 23       	and	r24, r24
 70c:	4a f0       	brmi	.+18     	; 0x720 <__mulsf3_pse+0x7a>
 70e:	ee 0f       	add	r30, r30
 710:	ff 1f       	adc	r31, r31
 712:	bb 1f       	adc	r27, r27
 714:	66 1f       	adc	r22, r22
 716:	77 1f       	adc	r23, r23
 718:	88 1f       	adc	r24, r24
 71a:	91 50       	subi	r25, 0x01	; 1
 71c:	50 40       	sbci	r21, 0x00	; 0
 71e:	a9 f7       	brne	.-22     	; 0x70a <__mulsf3_pse+0x64>
 720:	9e 3f       	cpi	r25, 0xFE	; 254
 722:	51 05       	cpc	r21, r1
 724:	70 f0       	brcs	.+28     	; 0x742 <__mulsf3_pse+0x9c>
 726:	60 cf       	rjmp	.-320    	; 0x5e8 <__fp_inf>
 728:	aa cf       	rjmp	.-172    	; 0x67e <__fp_szero>
 72a:	5f 3f       	cpi	r21, 0xFF	; 255
 72c:	ec f3       	brlt	.-6      	; 0x728 <__mulsf3_pse+0x82>
 72e:	98 3e       	cpi	r25, 0xE8	; 232
 730:	dc f3       	brlt	.-10     	; 0x728 <__mulsf3_pse+0x82>
 732:	86 95       	lsr	r24
 734:	77 95       	ror	r23
 736:	67 95       	ror	r22
 738:	b7 95       	ror	r27
 73a:	f7 95       	ror	r31
 73c:	e7 95       	ror	r30
 73e:	9f 5f       	subi	r25, 0xFF	; 255
 740:	c1 f7       	brne	.-16     	; 0x732 <__mulsf3_pse+0x8c>
 742:	fe 2b       	or	r31, r30
 744:	88 0f       	add	r24, r24
 746:	91 1d       	adc	r25, r1
 748:	96 95       	lsr	r25
 74a:	87 95       	ror	r24
 74c:	97 f9       	bld	r25, 7
 74e:	08 95       	ret

00000750 <__divmodhi4>:
 750:	97 fb       	bst	r25, 7
 752:	07 2e       	mov	r0, r23
 754:	16 f4       	brtc	.+4      	; 0x75a <__divmodhi4+0xa>
 756:	00 94       	com	r0
 758:	06 d0       	rcall	.+12     	; 0x766 <__divmodhi4_neg1>
 75a:	77 fd       	sbrc	r23, 7
 75c:	08 d0       	rcall	.+16     	; 0x76e <__divmodhi4_neg2>
 75e:	0b d0       	rcall	.+22     	; 0x776 <__udivmodhi4>
 760:	07 fc       	sbrc	r0, 7
 762:	05 d0       	rcall	.+10     	; 0x76e <__divmodhi4_neg2>
 764:	3e f4       	brtc	.+14     	; 0x774 <__divmodhi4_exit>

00000766 <__divmodhi4_neg1>:
 766:	90 95       	com	r25
 768:	81 95       	neg	r24
 76a:	9f 4f       	sbci	r25, 0xFF	; 255
 76c:	08 95       	ret

0000076e <__divmodhi4_neg2>:
 76e:	70 95       	com	r23
 770:	61 95       	neg	r22
 772:	7f 4f       	sbci	r23, 0xFF	; 255

00000774 <__divmodhi4_exit>:
 774:	08 95       	ret

00000776 <__udivmodhi4>:
 776:	aa 1b       	sub	r26, r26
 778:	bb 1b       	sub	r27, r27
 77a:	51 e1       	ldi	r21, 0x11	; 17
 77c:	07 c0       	rjmp	.+14     	; 0x78c <__udivmodhi4_ep>

0000077e <__udivmodhi4_loop>:
 77e:	aa 1f       	adc	r26, r26
 780:	bb 1f       	adc	r27, r27
 782:	a6 17       	cp	r26, r22
 784:	b7 07       	cpc	r27, r23
 786:	10 f0       	brcs	.+4      	; 0x78c <__udivmodhi4_ep>
 788:	a6 1b       	sub	r26, r22
 78a:	b7 0b       	sbc	r27, r23

0000078c <__udivmodhi4_ep>:
 78c:	88 1f       	adc	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	5a 95       	dec	r21
 792:	a9 f7       	brne	.-22     	; 0x77e <__udivmodhi4_loop>
 794:	80 95       	com	r24
 796:	90 95       	com	r25
 798:	bc 01       	movw	r22, r24
 79a:	cd 01       	movw	r24, r26
 79c:	08 95       	ret

0000079e <_exit>:
 79e:	f8 94       	cli

000007a0 <__stop_program>:
 7a0:	ff cf       	rjmp	.-2      	; 0x7a0 <__stop_program>
