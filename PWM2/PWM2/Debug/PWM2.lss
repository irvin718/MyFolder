
PWM2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000003a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a5b  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087d  00000000  00000000  00000ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000574  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044e  00000000  00000000  00001e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022c  00000000  00000000  0000225e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000248a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4c c0       	rjmp	.+152    	; 0xae <__vector_5>
  16:	00 00       	nop
  18:	62 c0       	rjmp	.+196    	; 0xde <__vector_6>
  1a:	00 00       	nop
  1c:	78 c0       	rjmp	.+240    	; 0x10e <__vector_7>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	7e c0       	rjmp	.+252    	; 0x136 <__vector_14>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a8 30       	cpi	r26, 0x08	; 8
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	ca d0       	rcall	.+404    	; 0x23e <main>
  aa:	3f c1       	rjmp	.+638    	; 0x32a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_5>:
volatile int SW1 = 0;
volatile int SW2 = 0;
volatile int SW3 = 0;

ISR(INT4_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
	SW1 = 1;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SW1+0x1>
  c4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SW1>
	SW2 = 0;
  c8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <SW2+0x1>
  cc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <SW2>
}
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <__vector_6>:

ISR(INT5_vect)
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
	SW1 = 0;
  ec:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <SW1+0x1>
  f0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <SW1>
	SW2 = 1;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <SW2+0x1>
  fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <SW2>
}
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <__vector_7>:

ISR(INT6_vect)
{
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
	SW3 = 1;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 124:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <__vector_14>:
		else PORTD = 0x00;
	}
}
*/
ISR(TIMER1_OVF_vect)
{
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
	//1초마다 동작
	count++;
 144:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count>
 148:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <count+0x1>
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <count+0x1>
 152:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <count>
}
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <AVR_INIT>:

void AVR_INIT()
{
	DDRD = 0x01;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
 168:	12 ba       	out	0x12, r1	; 18
	DDRB = 0xff; //pwm
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	87 bb       	out	0x17, r24	; 23
	DDRE = 0x00;
 16e:	12 b8       	out	0x02, r1	; 2
	PORTE = 0x70;
 170:	80 e7       	ldi	r24, 0x70	; 112
 172:	83 b9       	out	0x03, r24	; 3
 174:	08 95       	ret

00000176 <INT_INIT>:
}

void INT_INIT()
{
	EIMSK |= (1<< INT4) | (1<<INT5) |( 1<<INT6);
 176:	89 b7       	in	r24, 0x39	; 57
 178:	80 67       	ori	r24, 0x70	; 112
 17a:	89 bf       	out	0x39, r24	; 57
	EICRB |= (1<< ISC41) | ( 1<<ISC51) | ( 1<<ISC61);
 17c:	8a b7       	in	r24, 0x3a	; 58
 17e:	8a 62       	ori	r24, 0x2A	; 42
 180:	8a bf       	out	0x3a, r24	; 58
 182:	08 95       	ret

00000184 <TIMER1_INIT>:
void TIMER1_INIT()
{
	//TCCR1A |= (1<<WGM10);
	//TCCR1A |= (1<<COM1A1);
	//TCCR1A |= (1<<COM1B1) | (1<<COM1B0);
	TCCR1B |= (1<<CS12);
 184:	8e b5       	in	r24, 0x2e	; 46
 186:	84 60       	ori	r24, 0x04	; 4
 188:	8e bd       	out	0x2e, r24	; 46
	TIMSK |=(1<<TOIE1);
 18a:	87 b7       	in	r24, 0x37	; 55
 18c:	84 60       	ori	r24, 0x04	; 4
 18e:	87 bf       	out	0x37, r24	; 55
 190:	08 95       	ret

00000192 <RunWash>:
}

void RunWash()
{
	count = 0;
 192:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <count+0x1>
 196:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <count>
	int temp_state1 = 1;
	DDRB = 0xff; //pwm
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	87 bb       	out	0x17, r24	; 23
			OCR0 = 50;
			OCR2 = 200;
		}
		else if((count >3)&& (count <= 6))
		{
			OCR0 = 200;
 19e:	38 ec       	ldi	r19, 0xC8	; 200
			OCR2 = 50;
 1a0:	22 e3       	ldi	r18, 0x32	; 50
	int temp_state1 = 1;
	DDRB = 0xff; //pwm
	
	while(temp_state1)
	{
		if((count > 0)&&(count <= 3))
 1a2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count>
 1a6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <count+0x1>
 1aa:	18 16       	cp	r1, r24
 1ac:	19 06       	cpc	r1, r25
 1ae:	4c f4       	brge	.+18     	; 0x1c2 <RunWash+0x30>
 1b0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count>
 1b4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <count+0x1>
 1b8:	04 97       	sbiw	r24, 0x04	; 4
 1ba:	1c f4       	brge	.+6      	; 0x1c2 <RunWash+0x30>
		{
			OCR0 = 50;
 1bc:	21 bf       	out	0x31, r18	; 49
			OCR2 = 200;
 1be:	33 bd       	out	0x23, r19	; 35
 1c0:	f0 cf       	rjmp	.-32     	; 0x1a2 <RunWash+0x10>
		}
		else if((count >3)&& (count <= 6))
 1c2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count>
 1c6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <count+0x1>
 1ca:	04 97       	sbiw	r24, 0x04	; 4
 1cc:	4c f0       	brlt	.+18     	; 0x1e0 <RunWash+0x4e>
 1ce:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count>
 1d2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <count+0x1>
 1d6:	07 97       	sbiw	r24, 0x07	; 7
 1d8:	1c f4       	brge	.+6      	; 0x1e0 <RunWash+0x4e>
		{
			OCR0 = 200;
 1da:	31 bf       	out	0x31, r19	; 49
			OCR2 = 50;
 1dc:	23 bd       	out	0x23, r18	; 35
 1de:	e1 cf       	rjmp	.-62     	; 0x1a2 <RunWash+0x10>
		}
		else if(count > 6)
 1e0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count>
 1e4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <count+0x1>
 1e8:	07 97       	sbiw	r24, 0x07	; 7
 1ea:	dc f2       	brlt	.-74     	; 0x1a2 <RunWash+0x10>
		{
			temp_state1 = 0;
		}
	}
	DDRB = 0x00; //pwm
 1ec:	17 ba       	out	0x17, r1	; 23
	OCR0 = 127;
 1ee:	8f e7       	ldi	r24, 0x7F	; 127
 1f0:	81 bf       	out	0x31, r24	; 49
	OCR2 = 127;
 1f2:	83 bd       	out	0x23, r24	; 35
 1f4:	08 95       	ret

000001f6 <RunDry>:
}

void RunDry()
{
	count = 0;
 1f6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <count+0x1>
 1fa:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <count>
	int temp_state2 = 1;
	DDRB = 0xff; //pwm
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	87 bb       	out	0x17, r24	; 23
	while(temp_state2)
	{
		if((count > 0)&&(count < 4))
		{
			OCR0 = 254;
 202:	3e ef       	ldi	r19, 0xFE	; 254
			OCR2 = 1;
 204:	21 e0       	ldi	r18, 0x01	; 1
	count = 0;
	int temp_state2 = 1;
	DDRB = 0xff; //pwm
	while(temp_state2)
	{
		if((count > 0)&&(count < 4))
 206:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count>
 20a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <count+0x1>
 20e:	18 16       	cp	r1, r24
 210:	19 06       	cpc	r1, r25
 212:	4c f4       	brge	.+18     	; 0x226 <RunDry+0x30>
 214:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count>
 218:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <count+0x1>
 21c:	04 97       	sbiw	r24, 0x04	; 4
 21e:	1c f4       	brge	.+6      	; 0x226 <RunDry+0x30>
		{
			OCR0 = 254;
 220:	31 bf       	out	0x31, r19	; 49
			OCR2 = 1;
 222:	23 bd       	out	0x23, r18	; 35
 224:	f0 cf       	rjmp	.-32     	; 0x206 <RunDry+0x10>
		}
		else if(count > 4)
 226:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count>
 22a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <count+0x1>
 22e:	05 97       	sbiw	r24, 0x05	; 5
 230:	54 f3       	brlt	.-44     	; 0x206 <RunDry+0x10>
		{
			temp_state2 = 0;
			DDRB = 0x00;
 232:	17 ba       	out	0x17, r1	; 23
		}
	}
	DDRB = 0x00; //pwm
 234:	17 ba       	out	0x17, r1	; 23
	OCR0 = 127;
 236:	8f e7       	ldi	r24, 0x7F	; 127
 238:	81 bf       	out	0x31, r24	; 49
	OCR2 = 127;
 23a:	83 bd       	out	0x23, r24	; 35
 23c:	08 95       	ret

0000023e <main>:

enum WashState {IDLE, WASH, DRY} WashState;

int main(void)
{
	AVR_INIT();
 23e:	92 df       	rcall	.-220    	; 0x164 <AVR_INIT>
	PWM_INIT();
 240:	61 d0       	rcall	.+194    	; 0x304 <PWM_INIT>
	INT_INIT();
 242:	99 df       	rcall	.-206    	; 0x176 <INT_INIT>
 244:	9f df       	rcall	.-194    	; 0x184 <TIMER1_INIT>
	TIMER1_INIT();
 246:	78 94       	sei
 248:	40 e0       	ldi	r20, 0x00	; 0
	
	int washFlag = 0;
	int dryFlag = 0;
	sei();
 24a:	50 e0       	ldi	r21, 0x00	; 0
	PWM_INIT();
	INT_INIT();
	TIMER1_INIT();
	
	int washFlag = 0;
	int dryFlag = 0;
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	30 e0       	ldi	r19, 0x00	; 0
	AVR_INIT();
	PWM_INIT();
	INT_INIT();
	TIMER1_INIT();
	
	int washFlag = 0;
 250:	d1 e0       	ldi	r29, 0x01	; 1
 252:	c0 e0       	ldi	r28, 0x00	; 0
			dryFlag = 0;
		}
		else if((SW2 == 1) &&(SW3 == 0))
		{
			washFlag = 0;
			dryFlag = 1;
 254:	09 c0       	rjmp	.+18     	; 0x268 <main+0x2a>
 256:	40 e0       	ldi	r20, 0x00	; 0
 258:	50 e0       	ldi	r21, 0x00	; 0
		*/
		
		if ((SW1 == 1)&&(SW3 == 0))
		{
			washFlag = 1;
			dryFlag = 0;
 25a:	2d 2f       	mov	r18, r29
 25c:	3c 2f       	mov	r19, r28
		}
		*/
		
		if ((SW1 == 1)&&(SW3 == 0))
		{
			washFlag = 1;
 25e:	04 c0       	rjmp	.+8      	; 0x268 <main+0x2a>
 260:	4d 2f       	mov	r20, r29
 262:	5c 2f       	mov	r21, r28
			dryFlag = 0;
		}
		else if((SW2 == 1) &&(SW3 == 0))
		{
			washFlag = 0;
			dryFlag = 1;
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
			washFlag = 1;
			dryFlag = 0;
		}
		else if((SW2 == 1) &&(SW3 == 0))
		{
			washFlag = 0;
 268:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SW1>
				WashState = IDLE;
			break;
		}
		*/
		
		if ((SW1 == 1)&&(SW3 == 0))
 26c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SW1+0x1>
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	31 f4       	brne	.+12     	; 0x280 <main+0x42>
 274:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 278:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 27c:	89 2b       	or	r24, r25
 27e:	59 f3       	breq	.-42     	; 0x256 <main+0x18>
 280:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <SW2>
		{
			washFlag = 1;
			dryFlag = 0;
		}
		else if((SW2 == 1) &&(SW3 == 0))
 284:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <SW2+0x1>
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	31 f4       	brne	.+12     	; 0x298 <main+0x5a>
 28c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 290:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 294:	89 2b       	or	r24, r25
 296:	21 f3       	breq	.-56     	; 0x260 <main+0x22>
 298:	21 30       	cpi	r18, 0x01	; 1
 29a:	31 05       	cpc	r19, r1
		{
			washFlag = 0;
			dryFlag = 1;
		}
		else if((washFlag == 1 )&&(SW3 == 1))
 29c:	c1 f4       	brne	.+48     	; 0x2ce <main+0x90>
 29e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	91 f4       	brne	.+36     	; 0x2ce <main+0x90>
 2aa:	73 df       	rcall	.-282    	; 0x192 <RunWash>
		{
			washFlag = 0;
			dryFlag = 0;
			RunWash();
 2ac:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <SW1+0x1>
			SW1 = 0;
 2b0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <SW1>
 2b4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <SW2+0x1>
			SW2 = 0;
 2b8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <SW2>
 2bc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
			SW3 = 0;
 2c0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	50 e0       	ldi	r21, 0x00	; 0
			dryFlag = 1;
		}
		else if((washFlag == 1 )&&(SW3 == 1))
		{
			washFlag = 0;
			dryFlag = 0;
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
			washFlag = 0;
			dryFlag = 1;
		}
		else if((washFlag == 1 )&&(SW3 == 1))
		{
			washFlag = 0;
 2cc:	cd cf       	rjmp	.-102    	; 0x268 <main+0x2a>
 2ce:	41 30       	cpi	r20, 0x01	; 1
			dryFlag = 0;
			RunWash();
			SW1 = 0;
			SW2 = 0;
			SW3 = 0;
 2d0:	51 05       	cpc	r21, r1
		}
		else if((dryFlag == 1)&&(SW3 == 1))
 2d2:	51 f6       	brne	.-108    	; 0x268 <main+0x2a>
 2d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	21 f6       	brne	.-120    	; 0x268 <main+0x2a>
 2e0:	8a df       	rcall	.-236    	; 0x1f6 <RunDry>
		{
			washFlag = 0;
			dryFlag = 0;
			RunDry();
 2e2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <SW1+0x1>
			SW1 = 0;
 2e6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <SW1>
 2ea:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <SW2+0x1>
			SW2 = 0;
 2ee:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <SW2>
 2f2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
			SW3 = 0;
 2f6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	50 e0       	ldi	r21, 0x00	; 0
			SW3 = 0;
		}
		else if((dryFlag == 1)&&(SW3 == 1))
		{
			washFlag = 0;
			dryFlag = 0;
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	30 e0       	ldi	r19, 0x00	; 0
			SW2 = 0;
			SW3 = 0;
		}
		else if((dryFlag == 1)&&(SW3 == 1))
		{
			washFlag = 0;
 302:	b2 cf       	rjmp	.-156    	; 0x268 <main+0x2a>

00000304 <PWM_INIT>:
 */ 
#include <avr/io.h>

void PWM_INIT()
{
	TCCR0 |= (1<< CS02) | (1<< CS01);
 304:	83 b7       	in	r24, 0x33	; 51
 306:	86 60       	ori	r24, 0x06	; 6
 308:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<WGM01) | (1<<WGM00);
 30a:	83 b7       	in	r24, 0x33	; 51
 30c:	88 64       	ori	r24, 0x48	; 72
 30e:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<COM01);
 310:	83 b7       	in	r24, 0x33	; 51
 312:	80 62       	ori	r24, 0x20	; 32
 314:	83 bf       	out	0x33, r24	; 51
	
	TCCR2 |= (1<< CS22);
 316:	85 b5       	in	r24, 0x25	; 37
 318:	84 60       	ori	r24, 0x04	; 4
 31a:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<< WGM20) | (1<< WGM21);
 31c:	85 b5       	in	r24, 0x25	; 37
 31e:	88 64       	ori	r24, 0x48	; 72
 320:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<< COM21);
 322:	85 b5       	in	r24, 0x25	; 37
 324:	80 62       	ori	r24, 0x20	; 32
 326:	85 bd       	out	0x25, r24	; 37
 328:	08 95       	ret

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
